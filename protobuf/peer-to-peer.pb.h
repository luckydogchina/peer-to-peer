// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer-to-peer.proto

#ifndef PROTOBUF_peer_2dto_2dpeer_2eproto__INCLUDED
#define PROTOBUF_peer_2dto_2dpeer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace p2p {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Indication;
class IndicationDefaultTypeInternal;
extern IndicationDefaultTypeInternal _Indication_default_instance_;
class Msg;
class MsgDefaultTypeInternal;
extern MsgDefaultTypeInternal _Msg_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Respond;
class RespondDefaultTypeInternal;
extern RespondDefaultTypeInternal _Respond_default_instance_;
class Transcation;
class TranscationDefaultTypeInternal;
extern TranscationDefaultTypeInternal _Transcation_default_instance_;
}  // namespace p2p

namespace p2p {

namespace protobuf_peer_2dto_2dpeer_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_peer_2dto_2dpeer_2eproto

enum Msg_MsgType {
  Msg_MsgType_REQUEST = 1,
  Msg_MsgType_RESPOND = 2,
  Msg_MsgType_COMMAND = 3,
  Msg_MsgType_INDICATION = 4,
  Msg_MsgType_TRANSCATION = 5
};
bool Msg_MsgType_IsValid(int value);
const Msg_MsgType Msg_MsgType_MsgType_MIN = Msg_MsgType_REQUEST;
const Msg_MsgType Msg_MsgType_MsgType_MAX = Msg_MsgType_TRANSCATION;
const int Msg_MsgType_MsgType_ARRAYSIZE = Msg_MsgType_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Msg_MsgType_descriptor();
inline const ::std::string& Msg_MsgType_Name(Msg_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Msg_MsgType_descriptor(), value);
}
inline bool Msg_MsgType_Parse(
    const ::std::string& name, Msg_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Msg_MsgType>(
    Msg_MsgType_descriptor(), name, value);
}
enum ActionType {
  PEERONLINE = 1,
  CONNECTA = 2,
  CONNECTB = 4,
  HELLO = 3,
  HOLE = 5,
  HEART = 6
};
bool ActionType_IsValid(int value);
const ActionType ActionType_MIN = PEERONLINE;
const ActionType ActionType_MAX = HEART;
const int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionType_descriptor();
inline const ::std::string& ActionType_Name(ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionType_descriptor(), value);
}
inline bool ActionType_Parse(
    const ::std::string& name, ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
enum StatusType {
  SUCCESS = 1,
  FAILURE = 2,
  READY = 3,
  CLOSE = 4,
  RUNNING = 5
};
bool StatusType_IsValid(int value);
const StatusType StatusType_MIN = SUCCESS;
const StatusType StatusType_MAX = RUNNING;
const int StatusType_ARRAYSIZE = StatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusType_descriptor();
inline const ::std::string& StatusType_Name(StatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusType_descriptor(), value);
}
inline bool StatusType_Parse(
    const ::std::string& name, StatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusType>(
    StatusType_descriptor(), name, value);
}
// ===================================================================

class Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Address* other);

  // implements Message ----------------------------------------------

  inline Address* New() const PROTOBUF_FINAL { return New(NULL); }

  Address* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:p2p.Address)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 port_;
  friend struct protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .p2p.Address adr = 3;
  bool has_adr() const;
  void clear_adr();
  static const int kAdrFieldNumber = 3;
  const ::p2p::Address& adr() const;
  ::p2p::Address* mutable_adr();
  ::p2p::Address* release_adr();
  void set_allocated_adr(::p2p::Address* adr);

  // required .p2p.ActionType action = 1;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::p2p::ActionType action() const;
  void set_action(::p2p::ActionType value);

  // @@protoc_insertion_point(class_scope:p2p.Request)
 private:
  void set_has_action();
  void clear_has_action();
  void set_has_adr();
  void clear_has_adr();
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::p2p::Address* adr_;
  int action_;
  friend struct protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Respond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.Respond) */ {
 public:
  Respond();
  virtual ~Respond();

  Respond(const Respond& from);

  inline Respond& operator=(const Respond& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Respond& default_instance();

  static inline const Respond* internal_default_instance() {
    return reinterpret_cast<const Respond*>(
               &_Respond_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Respond* other);

  // implements Message ----------------------------------------------

  inline Respond* New() const PROTOBUF_FINAL { return New(NULL); }

  Respond* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Respond& from);
  void MergeFrom(const Respond& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Respond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string id = 3;
  int id_size() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id(int index) const;
  ::std::string* mutable_id(int index);
  void set_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_id(int index, ::std::string&& value);
  #endif
  void set_id(int index, const char* value);
  void set_id(int index, const char* value, size_t size);
  ::std::string* add_id();
  void add_id(const ::std::string& value);
  #if LANG_CXX11
  void add_id(::std::string&& value);
  #endif
  void add_id(const char* value);
  void add_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_id();

  // required .p2p.ActionType action = 1;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::p2p::ActionType action() const;
  void set_action(::p2p::ActionType value);

  // optional .p2p.StatusType result = 4 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 4;
  ::p2p::StatusType result() const;
  void set_result(::p2p::StatusType value);

  // @@protoc_insertion_point(class_scope:p2p.Respond)
 private:
  void set_has_action();
  void clear_has_action();
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> id_;
  int action_;
  int result_;
  friend struct protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  inline Command* New() const PROTOBUF_FINAL { return New(NULL); }

  Command* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required .p2p.ActionType action = 1;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::p2p::ActionType action() const;
  void set_action(::p2p::ActionType value);

  // @@protoc_insertion_point(class_scope:p2p.Command)
 private:
  void set_has_action();
  void clear_has_action();
  void set_has_id();
  void clear_has_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  int action_;
  friend struct protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Indication : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.Indication) */ {
 public:
  Indication();
  virtual ~Indication();

  Indication(const Indication& from);

  inline Indication& operator=(const Indication& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Indication& default_instance();

  static inline const Indication* internal_default_instance() {
    return reinterpret_cast<const Indication*>(
               &_Indication_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Indication* other);

  // implements Message ----------------------------------------------

  inline Indication* New() const PROTOBUF_FINAL { return New(NULL); }

  Indication* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Indication& from);
  void MergeFrom(const Indication& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Indication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .p2p.Address adr = 4;
  bool has_adr() const;
  void clear_adr();
  static const int kAdrFieldNumber = 4;
  const ::p2p::Address& adr() const;
  ::p2p::Address* mutable_adr();
  ::p2p::Address* release_adr();
  void set_allocated_adr(::p2p::Address* adr);

  // required .p2p.ActionType action = 1;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::p2p::ActionType action() const;
  void set_action(::p2p::ActionType value);

  // required .p2p.StatusType result = 2 [default = SUCCESS];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::p2p::StatusType result() const;
  void set_result(::p2p::StatusType value);

  // @@protoc_insertion_point(class_scope:p2p.Indication)
 private:
  void set_has_action();
  void clear_has_action();
  void set_has_result();
  void clear_has_result();
  void set_has_id();
  void clear_has_id();
  void set_has_adr();
  void clear_has_adr();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::p2p::Address* adr_;
  int action_;
  int result_;
  friend struct protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transcation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.Transcation) */ {
 public:
  Transcation();
  virtual ~Transcation();

  Transcation(const Transcation& from);

  inline Transcation& operator=(const Transcation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transcation& default_instance();

  static inline const Transcation* internal_default_instance() {
    return reinterpret_cast<const Transcation*>(
               &_Transcation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Transcation* other);

  // implements Message ----------------------------------------------

  inline Transcation* New() const PROTOBUF_FINAL { return New(NULL); }

  Transcation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transcation& from);
  void MergeFrom(const Transcation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transcation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 len = 1;
  bool has_len() const;
  void clear_len();
  static const int kLenFieldNumber = 1;
  ::google::protobuf::int32 len() const;
  void set_len(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:p2p.Transcation)
 private:
  void set_has_len();
  void clear_has_len();
  void set_has_msg();
  void clear_has_msg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 len_;
  friend struct protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.Msg) */ {
 public:
  Msg();
  virtual ~Msg();

  Msg(const Msg& from);

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg& default_instance();

  static inline const Msg* internal_default_instance() {
    return reinterpret_cast<const Msg*>(
               &_Msg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Msg* other);

  // implements Message ----------------------------------------------

  inline Msg* New() const PROTOBUF_FINAL { return New(NULL); }

  Msg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Msg& from);
  void MergeFrom(const Msg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Msg_MsgType MsgType;
  static const MsgType REQUEST =
    Msg_MsgType_REQUEST;
  static const MsgType RESPOND =
    Msg_MsgType_RESPOND;
  static const MsgType COMMAND =
    Msg_MsgType_COMMAND;
  static const MsgType INDICATION =
    Msg_MsgType_INDICATION;
  static const MsgType TRANSCATION =
    Msg_MsgType_TRANSCATION;
  static inline bool MsgType_IsValid(int value) {
    return Msg_MsgType_IsValid(value);
  }
  static const MsgType MsgType_MIN =
    Msg_MsgType_MsgType_MIN;
  static const MsgType MsgType_MAX =
    Msg_MsgType_MsgType_MAX;
  static const int MsgType_ARRAYSIZE =
    Msg_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgType_descriptor() {
    return Msg_MsgType_descriptor();
  }
  static inline const ::std::string& MsgType_Name(MsgType value) {
    return Msg_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(const ::std::string& name,
      MsgType* value) {
    return Msg_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string version = 1 [default = "0.1.0"];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional .p2p.Request rqs = 3;
  bool has_rqs() const;
  void clear_rqs();
  static const int kRqsFieldNumber = 3;
  const ::p2p::Request& rqs() const;
  ::p2p::Request* mutable_rqs();
  ::p2p::Request* release_rqs();
  void set_allocated_rqs(::p2p::Request* rqs);

  // optional .p2p.Respond rsp = 4;
  bool has_rsp() const;
  void clear_rsp();
  static const int kRspFieldNumber = 4;
  const ::p2p::Respond& rsp() const;
  ::p2p::Respond* mutable_rsp();
  ::p2p::Respond* release_rsp();
  void set_allocated_rsp(::p2p::Respond* rsp);

  // optional .p2p.Command cmd = 5;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 5;
  const ::p2p::Command& cmd() const;
  ::p2p::Command* mutable_cmd();
  ::p2p::Command* release_cmd();
  void set_allocated_cmd(::p2p::Command* cmd);

  // optional .p2p.Indication idt = 6;
  bool has_idt() const;
  void clear_idt();
  static const int kIdtFieldNumber = 6;
  const ::p2p::Indication& idt() const;
  ::p2p::Indication* mutable_idt();
  ::p2p::Indication* release_idt();
  void set_allocated_idt(::p2p::Indication* idt);

  // optional .p2p.Transcation trs = 7;
  bool has_trs() const;
  void clear_trs();
  static const int kTrsFieldNumber = 7;
  const ::p2p::Transcation& trs() const;
  ::p2p::Transcation* mutable_trs();
  ::p2p::Transcation* release_trs();
  void set_allocated_trs(::p2p::Transcation* trs);

  // required .p2p.Msg.MsgType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::p2p::Msg_MsgType type() const;
  void set_type(::p2p::Msg_MsgType value);

  // @@protoc_insertion_point(class_scope:p2p.Msg)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_type();
  void clear_has_type();
  void set_has_rqs();
  void clear_has_rqs();
  void set_has_rsp();
  void clear_has_rsp();
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_idt();
  void clear_has_idt();
  void set_has_trs();
  void clear_has_trs();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_version_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::p2p::Request* rqs_;
  ::p2p::Respond* rsp_;
  ::p2p::Command* cmd_;
  ::p2p::Indication* idt_;
  ::p2p::Transcation* trs_;
  int type_;
  friend struct protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Address

// required string ip = 1;
inline bool Address::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Address::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Address::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Address::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& Address::ip() const {
  // @@protoc_insertion_point(field_get:p2p.Address.ip)
  return ip_.GetNoArena();
}
inline void Address::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.Address.ip)
}
#if LANG_CXX11
inline void Address::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.Address.ip)
}
#endif
inline void Address::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.Address.ip)
}
inline void Address::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.Address.ip)
}
inline ::std::string* Address::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:p2p.Address.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_ip() {
  // @@protoc_insertion_point(field_release:p2p.Address.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:p2p.Address.ip)
}

// required int32 port = 2;
inline bool Address::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Address::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Address::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Address::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Address::port() const {
  // @@protoc_insertion_point(field_get:p2p.Address.port)
  return port_;
}
inline void Address::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:p2p.Address.port)
}

// -------------------------------------------------------------------

// Request

// required .p2p.ActionType action = 1;
inline bool Request::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::p2p::ActionType Request::action() const {
  // @@protoc_insertion_point(field_get:p2p.Request.action)
  return static_cast< ::p2p::ActionType >(action_);
}
inline void Request::set_action(::p2p::ActionType value) {
  assert(::p2p::ActionType_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:p2p.Request.action)
}

// optional .p2p.Address adr = 3;
inline bool Request::has_adr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_adr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_adr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_adr() {
  if (adr_ != NULL) adr_->::p2p::Address::Clear();
  clear_has_adr();
}
inline const ::p2p::Address& Request::adr() const {
  // @@protoc_insertion_point(field_get:p2p.Request.adr)
  return adr_ != NULL ? *adr_
                         : *::p2p::Address::internal_default_instance();
}
inline ::p2p::Address* Request::mutable_adr() {
  set_has_adr();
  if (adr_ == NULL) {
    adr_ = new ::p2p::Address;
  }
  // @@protoc_insertion_point(field_mutable:p2p.Request.adr)
  return adr_;
}
inline ::p2p::Address* Request::release_adr() {
  // @@protoc_insertion_point(field_release:p2p.Request.adr)
  clear_has_adr();
  ::p2p::Address* temp = adr_;
  adr_ = NULL;
  return temp;
}
inline void Request::set_allocated_adr(::p2p::Address* adr) {
  delete adr_;
  adr_ = adr;
  if (adr) {
    set_has_adr();
  } else {
    clear_has_adr();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.Request.adr)
}

// optional string id = 2;
inline bool Request::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Request::id() const {
  // @@protoc_insertion_point(field_get:p2p.Request.id)
  return id_.GetNoArena();
}
inline void Request::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.Request.id)
}
#if LANG_CXX11
inline void Request::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.Request.id)
}
#endif
inline void Request::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.Request.id)
}
inline void Request::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.Request.id)
}
inline ::std::string* Request::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:p2p.Request.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_id() {
  // @@protoc_insertion_point(field_release:p2p.Request.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:p2p.Request.id)
}

// -------------------------------------------------------------------

// Respond

// required .p2p.ActionType action = 1;
inline bool Respond::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Respond::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Respond::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Respond::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::p2p::ActionType Respond::action() const {
  // @@protoc_insertion_point(field_get:p2p.Respond.action)
  return static_cast< ::p2p::ActionType >(action_);
}
inline void Respond::set_action(::p2p::ActionType value) {
  assert(::p2p::ActionType_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:p2p.Respond.action)
}

// repeated string id = 3;
inline int Respond::id_size() const {
  return id_.size();
}
inline void Respond::clear_id() {
  id_.Clear();
}
inline const ::std::string& Respond::id(int index) const {
  // @@protoc_insertion_point(field_get:p2p.Respond.id)
  return id_.Get(index);
}
inline ::std::string* Respond::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:p2p.Respond.id)
  return id_.Mutable(index);
}
inline void Respond::set_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:p2p.Respond.id)
  id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Respond::set_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:p2p.Respond.id)
  id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Respond::set_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p2p.Respond.id)
}
inline void Respond::set_id(int index, const char* value, size_t size) {
  id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p2p.Respond.id)
}
inline ::std::string* Respond::add_id() {
  // @@protoc_insertion_point(field_add_mutable:p2p.Respond.id)
  return id_.Add();
}
inline void Respond::add_id(const ::std::string& value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p2p.Respond.id)
}
#if LANG_CXX11
inline void Respond::add_id(::std::string&& value) {
  id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p2p.Respond.id)
}
#endif
inline void Respond::add_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p2p.Respond.id)
}
inline void Respond::add_id(const char* value, size_t size) {
  id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p2p.Respond.id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Respond::id() const {
  // @@protoc_insertion_point(field_list:p2p.Respond.id)
  return id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Respond::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:p2p.Respond.id)
  return &id_;
}

// optional .p2p.StatusType result = 4 [default = SUCCESS];
inline bool Respond::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Respond::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Respond::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Respond::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::p2p::StatusType Respond::result() const {
  // @@protoc_insertion_point(field_get:p2p.Respond.result)
  return static_cast< ::p2p::StatusType >(result_);
}
inline void Respond::set_result(::p2p::StatusType value) {
  assert(::p2p::StatusType_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:p2p.Respond.result)
}

// -------------------------------------------------------------------

// Command

// required .p2p.ActionType action = 1;
inline bool Command::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::p2p::ActionType Command::action() const {
  // @@protoc_insertion_point(field_get:p2p.Command.action)
  return static_cast< ::p2p::ActionType >(action_);
}
inline void Command::set_action(::p2p::ActionType value) {
  assert(::p2p::ActionType_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:p2p.Command.action)
}

// required string id = 2;
inline bool Command::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Command::id() const {
  // @@protoc_insertion_point(field_get:p2p.Command.id)
  return id_.GetNoArena();
}
inline void Command::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.Command.id)
}
#if LANG_CXX11
inline void Command::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.Command.id)
}
#endif
inline void Command::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.Command.id)
}
inline void Command::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.Command.id)
}
inline ::std::string* Command::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:p2p.Command.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_id() {
  // @@protoc_insertion_point(field_release:p2p.Command.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:p2p.Command.id)
}

// -------------------------------------------------------------------

// Indication

// required .p2p.ActionType action = 1;
inline bool Indication::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Indication::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Indication::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Indication::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::p2p::ActionType Indication::action() const {
  // @@protoc_insertion_point(field_get:p2p.Indication.action)
  return static_cast< ::p2p::ActionType >(action_);
}
inline void Indication::set_action(::p2p::ActionType value) {
  assert(::p2p::ActionType_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:p2p.Indication.action)
}

// required .p2p.StatusType result = 2 [default = SUCCESS];
inline bool Indication::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Indication::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Indication::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Indication::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::p2p::StatusType Indication::result() const {
  // @@protoc_insertion_point(field_get:p2p.Indication.result)
  return static_cast< ::p2p::StatusType >(result_);
}
inline void Indication::set_result(::p2p::StatusType value) {
  assert(::p2p::StatusType_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:p2p.Indication.result)
}

// optional string id = 3;
inline bool Indication::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Indication::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Indication::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Indication::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Indication::id() const {
  // @@protoc_insertion_point(field_get:p2p.Indication.id)
  return id_.GetNoArena();
}
inline void Indication::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.Indication.id)
}
#if LANG_CXX11
inline void Indication::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.Indication.id)
}
#endif
inline void Indication::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.Indication.id)
}
inline void Indication::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.Indication.id)
}
inline ::std::string* Indication::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:p2p.Indication.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Indication::release_id() {
  // @@protoc_insertion_point(field_release:p2p.Indication.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Indication::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:p2p.Indication.id)
}

// optional .p2p.Address adr = 4;
inline bool Indication::has_adr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Indication::set_has_adr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Indication::clear_has_adr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Indication::clear_adr() {
  if (adr_ != NULL) adr_->::p2p::Address::Clear();
  clear_has_adr();
}
inline const ::p2p::Address& Indication::adr() const {
  // @@protoc_insertion_point(field_get:p2p.Indication.adr)
  return adr_ != NULL ? *adr_
                         : *::p2p::Address::internal_default_instance();
}
inline ::p2p::Address* Indication::mutable_adr() {
  set_has_adr();
  if (adr_ == NULL) {
    adr_ = new ::p2p::Address;
  }
  // @@protoc_insertion_point(field_mutable:p2p.Indication.adr)
  return adr_;
}
inline ::p2p::Address* Indication::release_adr() {
  // @@protoc_insertion_point(field_release:p2p.Indication.adr)
  clear_has_adr();
  ::p2p::Address* temp = adr_;
  adr_ = NULL;
  return temp;
}
inline void Indication::set_allocated_adr(::p2p::Address* adr) {
  delete adr_;
  adr_ = adr;
  if (adr) {
    set_has_adr();
  } else {
    clear_has_adr();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.Indication.adr)
}

// -------------------------------------------------------------------

// Transcation

// required int32 len = 1;
inline bool Transcation::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transcation::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transcation::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transcation::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 Transcation::len() const {
  // @@protoc_insertion_point(field_get:p2p.Transcation.len)
  return len_;
}
inline void Transcation::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:p2p.Transcation.len)
}

// required bytes msg = 2;
inline bool Transcation::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transcation::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transcation::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transcation::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& Transcation::msg() const {
  // @@protoc_insertion_point(field_get:p2p.Transcation.msg)
  return msg_.GetNoArena();
}
inline void Transcation::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.Transcation.msg)
}
#if LANG_CXX11
inline void Transcation::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.Transcation.msg)
}
#endif
inline void Transcation::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.Transcation.msg)
}
inline void Transcation::set_msg(const void* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.Transcation.msg)
}
inline ::std::string* Transcation::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:p2p.Transcation.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transcation::release_msg() {
  // @@protoc_insertion_point(field_release:p2p.Transcation.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transcation::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:p2p.Transcation.msg)
}

// -------------------------------------------------------------------

// Msg

// required string version = 1 [default = "0.1.0"];
inline bool Msg::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg::clear_version() {
  version_.ClearToDefaultNoArena(&Msg::_default_version_.get());
  clear_has_version();
}
inline const ::std::string& Msg::version() const {
  // @@protoc_insertion_point(field_get:p2p.Msg.version)
  return version_.GetNoArena();
}
inline void Msg::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&Msg::_default_version_.get(), value);
  // @@protoc_insertion_point(field_set:p2p.Msg.version)
}
#if LANG_CXX11
inline void Msg::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &Msg::_default_version_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.Msg.version)
}
#endif
inline void Msg::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&Msg::_default_version_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.Msg.version)
}
inline void Msg::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&Msg::_default_version_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.Msg.version)
}
inline ::std::string* Msg::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:p2p.Msg.version)
  return version_.MutableNoArena(&Msg::_default_version_.get());
}
inline ::std::string* Msg::release_version() {
  // @@protoc_insertion_point(field_release:p2p.Msg.version)
  clear_has_version();
  return version_.ReleaseNoArena(&Msg::_default_version_.get());
}
inline void Msg::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&Msg::_default_version_.get(), version);
  // @@protoc_insertion_point(field_set_allocated:p2p.Msg.version)
}

// required .p2p.Msg.MsgType type = 2;
inline bool Msg::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Msg::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Msg::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Msg::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::p2p::Msg_MsgType Msg::type() const {
  // @@protoc_insertion_point(field_get:p2p.Msg.type)
  return static_cast< ::p2p::Msg_MsgType >(type_);
}
inline void Msg::set_type(::p2p::Msg_MsgType value) {
  assert(::p2p::Msg_MsgType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:p2p.Msg.type)
}

// optional .p2p.Request rqs = 3;
inline bool Msg::has_rqs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg::set_has_rqs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg::clear_has_rqs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg::clear_rqs() {
  if (rqs_ != NULL) rqs_->::p2p::Request::Clear();
  clear_has_rqs();
}
inline const ::p2p::Request& Msg::rqs() const {
  // @@protoc_insertion_point(field_get:p2p.Msg.rqs)
  return rqs_ != NULL ? *rqs_
                         : *::p2p::Request::internal_default_instance();
}
inline ::p2p::Request* Msg::mutable_rqs() {
  set_has_rqs();
  if (rqs_ == NULL) {
    rqs_ = new ::p2p::Request;
  }
  // @@protoc_insertion_point(field_mutable:p2p.Msg.rqs)
  return rqs_;
}
inline ::p2p::Request* Msg::release_rqs() {
  // @@protoc_insertion_point(field_release:p2p.Msg.rqs)
  clear_has_rqs();
  ::p2p::Request* temp = rqs_;
  rqs_ = NULL;
  return temp;
}
inline void Msg::set_allocated_rqs(::p2p::Request* rqs) {
  delete rqs_;
  rqs_ = rqs;
  if (rqs) {
    set_has_rqs();
  } else {
    clear_has_rqs();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.Msg.rqs)
}

// optional .p2p.Respond rsp = 4;
inline bool Msg::has_rsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg::set_has_rsp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg::clear_has_rsp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg::clear_rsp() {
  if (rsp_ != NULL) rsp_->::p2p::Respond::Clear();
  clear_has_rsp();
}
inline const ::p2p::Respond& Msg::rsp() const {
  // @@protoc_insertion_point(field_get:p2p.Msg.rsp)
  return rsp_ != NULL ? *rsp_
                         : *::p2p::Respond::internal_default_instance();
}
inline ::p2p::Respond* Msg::mutable_rsp() {
  set_has_rsp();
  if (rsp_ == NULL) {
    rsp_ = new ::p2p::Respond;
  }
  // @@protoc_insertion_point(field_mutable:p2p.Msg.rsp)
  return rsp_;
}
inline ::p2p::Respond* Msg::release_rsp() {
  // @@protoc_insertion_point(field_release:p2p.Msg.rsp)
  clear_has_rsp();
  ::p2p::Respond* temp = rsp_;
  rsp_ = NULL;
  return temp;
}
inline void Msg::set_allocated_rsp(::p2p::Respond* rsp) {
  delete rsp_;
  rsp_ = rsp;
  if (rsp) {
    set_has_rsp();
  } else {
    clear_has_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.Msg.rsp)
}

// optional .p2p.Command cmd = 5;
inline bool Msg::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg::clear_cmd() {
  if (cmd_ != NULL) cmd_->::p2p::Command::Clear();
  clear_has_cmd();
}
inline const ::p2p::Command& Msg::cmd() const {
  // @@protoc_insertion_point(field_get:p2p.Msg.cmd)
  return cmd_ != NULL ? *cmd_
                         : *::p2p::Command::internal_default_instance();
}
inline ::p2p::Command* Msg::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == NULL) {
    cmd_ = new ::p2p::Command;
  }
  // @@protoc_insertion_point(field_mutable:p2p.Msg.cmd)
  return cmd_;
}
inline ::p2p::Command* Msg::release_cmd() {
  // @@protoc_insertion_point(field_release:p2p.Msg.cmd)
  clear_has_cmd();
  ::p2p::Command* temp = cmd_;
  cmd_ = NULL;
  return temp;
}
inline void Msg::set_allocated_cmd(::p2p::Command* cmd) {
  delete cmd_;
  cmd_ = cmd;
  if (cmd) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.Msg.cmd)
}

// optional .p2p.Indication idt = 6;
inline bool Msg::has_idt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Msg::set_has_idt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Msg::clear_has_idt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Msg::clear_idt() {
  if (idt_ != NULL) idt_->::p2p::Indication::Clear();
  clear_has_idt();
}
inline const ::p2p::Indication& Msg::idt() const {
  // @@protoc_insertion_point(field_get:p2p.Msg.idt)
  return idt_ != NULL ? *idt_
                         : *::p2p::Indication::internal_default_instance();
}
inline ::p2p::Indication* Msg::mutable_idt() {
  set_has_idt();
  if (idt_ == NULL) {
    idt_ = new ::p2p::Indication;
  }
  // @@protoc_insertion_point(field_mutable:p2p.Msg.idt)
  return idt_;
}
inline ::p2p::Indication* Msg::release_idt() {
  // @@protoc_insertion_point(field_release:p2p.Msg.idt)
  clear_has_idt();
  ::p2p::Indication* temp = idt_;
  idt_ = NULL;
  return temp;
}
inline void Msg::set_allocated_idt(::p2p::Indication* idt) {
  delete idt_;
  idt_ = idt;
  if (idt) {
    set_has_idt();
  } else {
    clear_has_idt();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.Msg.idt)
}

// optional .p2p.Transcation trs = 7;
inline bool Msg::has_trs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Msg::set_has_trs() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Msg::clear_has_trs() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Msg::clear_trs() {
  if (trs_ != NULL) trs_->::p2p::Transcation::Clear();
  clear_has_trs();
}
inline const ::p2p::Transcation& Msg::trs() const {
  // @@protoc_insertion_point(field_get:p2p.Msg.trs)
  return trs_ != NULL ? *trs_
                         : *::p2p::Transcation::internal_default_instance();
}
inline ::p2p::Transcation* Msg::mutable_trs() {
  set_has_trs();
  if (trs_ == NULL) {
    trs_ = new ::p2p::Transcation;
  }
  // @@protoc_insertion_point(field_mutable:p2p.Msg.trs)
  return trs_;
}
inline ::p2p::Transcation* Msg::release_trs() {
  // @@protoc_insertion_point(field_release:p2p.Msg.trs)
  clear_has_trs();
  ::p2p::Transcation* temp = trs_;
  trs_ = NULL;
  return temp;
}
inline void Msg::set_allocated_trs(::p2p::Transcation* trs) {
  delete trs_;
  trs_ = trs;
  if (trs) {
    set_has_trs();
  } else {
    clear_has_trs();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.Msg.trs)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace p2p

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::p2p::Msg_MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::p2p::Msg_MsgType>() {
  return ::p2p::Msg_MsgType_descriptor();
}
template <> struct is_proto_enum< ::p2p::ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::p2p::ActionType>() {
  return ::p2p::ActionType_descriptor();
}
template <> struct is_proto_enum< ::p2p::StatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::p2p::StatusType>() {
  return ::p2p::StatusType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_peer_2dto_2dpeer_2eproto__INCLUDED
