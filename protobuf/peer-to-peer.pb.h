// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer-to-peer.proto

#ifndef PROTOBUF_INCLUDED_peer_2dto_2dpeer_2eproto
#define PROTOBUF_INCLUDED_peer_2dto_2dpeer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_peer_2dto_2dpeer_2eproto 

namespace protobuf_peer_2dto_2dpeer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_peer_2dto_2dpeer_2eproto
namespace p2p {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class ConnectRequest;
class ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class ConnectRespond;
class ConnectRespondDefaultTypeInternal;
extern ConnectRespondDefaultTypeInternal _ConnectRespond_default_instance_;
class GetUsersOnlineRespond;
class GetUsersOnlineRespondDefaultTypeInternal;
extern GetUsersOnlineRespondDefaultTypeInternal _GetUsersOnlineRespond_default_instance_;
class HelloRespond;
class HelloRespondDefaultTypeInternal;
extern HelloRespondDefaultTypeInternal _HelloRespond_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class NotifyRequest;
class NotifyRequestDefaultTypeInternal;
extern NotifyRequestDefaultTypeInternal _NotifyRequest_default_instance_;
class NotifyRespond;
class NotifyRespondDefaultTypeInternal;
extern NotifyRespondDefaultTypeInternal _NotifyRespond_default_instance_;
class PacketRequst;
class PacketRequstDefaultTypeInternal;
extern PacketRequstDefaultTypeInternal _PacketRequst_default_instance_;
class PacketRespond;
class PacketRespondDefaultTypeInternal;
extern PacketRespondDefaultTypeInternal _PacketRespond_default_instance_;
}  // namespace p2p
namespace google {
namespace protobuf {
template<> ::p2p::Address* Arena::CreateMaybeMessage<::p2p::Address>(Arena*);
template<> ::p2p::ConnectRequest* Arena::CreateMaybeMessage<::p2p::ConnectRequest>(Arena*);
template<> ::p2p::ConnectRespond* Arena::CreateMaybeMessage<::p2p::ConnectRespond>(Arena*);
template<> ::p2p::GetUsersOnlineRespond* Arena::CreateMaybeMessage<::p2p::GetUsersOnlineRespond>(Arena*);
template<> ::p2p::HelloRespond* Arena::CreateMaybeMessage<::p2p::HelloRespond>(Arena*);
template<> ::p2p::Message* Arena::CreateMaybeMessage<::p2p::Message>(Arena*);
template<> ::p2p::NotifyRequest* Arena::CreateMaybeMessage<::p2p::NotifyRequest>(Arena*);
template<> ::p2p::NotifyRespond* Arena::CreateMaybeMessage<::p2p::NotifyRespond>(Arena*);
template<> ::p2p::PacketRequst* Arena::CreateMaybeMessage<::p2p::PacketRequst>(Arena*);
template<> ::p2p::PacketRespond* Arena::CreateMaybeMessage<::p2p::PacketRespond>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace p2p {

enum RPCAPI {
  GETUSERSONLINE = 1,
  CONNECT = 2,
  INFO = 3,
  OFFLINE = 4,
  HEART = 5,
  HELLO = 6
};
bool RPCAPI_IsValid(int value);
const RPCAPI RPCAPI_MIN = GETUSERSONLINE;
const RPCAPI RPCAPI_MAX = HELLO;
const int RPCAPI_ARRAYSIZE = RPCAPI_MAX + 1;

const ::google::protobuf::EnumDescriptor* RPCAPI_descriptor();
inline const ::std::string& RPCAPI_Name(RPCAPI value) {
  return ::google::protobuf::internal::NameOfEnum(
    RPCAPI_descriptor(), value);
}
inline bool RPCAPI_Parse(
    const ::std::string& name, RPCAPI* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RPCAPI>(
    RPCAPI_descriptor(), name, value);
}
enum StatusType {
  SUCCESS = 1,
  FAILURE = 2,
  READY = 3,
  CLOSE = 4,
  RUNNING = 5,
  NOEXIST = 6,
  EXIST = 7
};
bool StatusType_IsValid(int value);
const StatusType StatusType_MIN = SUCCESS;
const StatusType StatusType_MAX = EXIST;
const int StatusType_ARRAYSIZE = StatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusType_descriptor();
inline const ::std::string& StatusType_Name(StatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusType_descriptor(), value);
}
inline bool StatusType_Parse(
    const ::std::string& name, StatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusType>(
    StatusType_descriptor(), name, value);
}
enum MessageType {
  ADDRESS = 1
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = ADDRESS;
const MessageType MessageType_MAX = ADDRESS;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class ConnectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.ConnectRequest) */ {
 public:
  ConnectRequest();
  virtual ~ConnectRequest();

  ConnectRequest(const ConnectRequest& from);

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectRequest(ConnectRequest&& from) noexcept
    : ConnectRequest() {
    *this = ::std::move(from);
  }

  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
               &_ConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConnectRequest* other);
  friend void swap(ConnectRequest& a, ConnectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectRequest* New() const final {
    return CreateMaybeMessage<ConnectRequest>(NULL);
  }

  ConnectRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectRequest& from);
  void MergeFrom(const ConnectRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string peerIdentity = 1;
  bool has_peeridentity() const;
  void clear_peeridentity();
  static const int kPeerIdentityFieldNumber = 1;
  const ::std::string& peeridentity() const;
  void set_peeridentity(const ::std::string& value);
  #if LANG_CXX11
  void set_peeridentity(::std::string&& value);
  #endif
  void set_peeridentity(const char* value);
  void set_peeridentity(const char* value, size_t size);
  ::std::string* mutable_peeridentity();
  ::std::string* release_peeridentity();
  void set_allocated_peeridentity(::std::string* peeridentity);

  // @@protoc_insertion_point(class_scope:p2p.ConnectRequest)
 private:
  void set_has_peeridentity();
  void clear_has_peeridentity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr peeridentity_;
  friend struct ::protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectRespond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.ConnectRespond) */ {
 public:
  ConnectRespond();
  virtual ~ConnectRespond();

  ConnectRespond(const ConnectRespond& from);

  inline ConnectRespond& operator=(const ConnectRespond& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectRespond(ConnectRespond&& from) noexcept
    : ConnectRespond() {
    *this = ::std::move(from);
  }

  inline ConnectRespond& operator=(ConnectRespond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectRespond* internal_default_instance() {
    return reinterpret_cast<const ConnectRespond*>(
               &_ConnectRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ConnectRespond* other);
  friend void swap(ConnectRespond& a, ConnectRespond& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectRespond* New() const final {
    return CreateMaybeMessage<ConnectRespond>(NULL);
  }

  ConnectRespond* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectRespond>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectRespond& from);
  void MergeFrom(const ConnectRespond& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectRespond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .p2p.StatusType statusType = 1 [default = SUCCESS];
  bool has_statustype() const;
  void clear_statustype();
  static const int kStatusTypeFieldNumber = 1;
  ::p2p::StatusType statustype() const;
  void set_statustype(::p2p::StatusType value);

  // @@protoc_insertion_point(class_scope:p2p.ConnectRespond)
 private:
  void set_has_statustype();
  void clear_has_statustype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int statustype_;
  friend struct ::protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetUsersOnlineRespond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.GetUsersOnlineRespond) */ {
 public:
  GetUsersOnlineRespond();
  virtual ~GetUsersOnlineRespond();

  GetUsersOnlineRespond(const GetUsersOnlineRespond& from);

  inline GetUsersOnlineRespond& operator=(const GetUsersOnlineRespond& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetUsersOnlineRespond(GetUsersOnlineRespond&& from) noexcept
    : GetUsersOnlineRespond() {
    *this = ::std::move(from);
  }

  inline GetUsersOnlineRespond& operator=(GetUsersOnlineRespond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetUsersOnlineRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUsersOnlineRespond* internal_default_instance() {
    return reinterpret_cast<const GetUsersOnlineRespond*>(
               &_GetUsersOnlineRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetUsersOnlineRespond* other);
  friend void swap(GetUsersOnlineRespond& a, GetUsersOnlineRespond& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetUsersOnlineRespond* New() const final {
    return CreateMaybeMessage<GetUsersOnlineRespond>(NULL);
  }

  GetUsersOnlineRespond* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetUsersOnlineRespond>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetUsersOnlineRespond& from);
  void MergeFrom(const GetUsersOnlineRespond& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUsersOnlineRespond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string usersOnline = 1;
  int usersonline_size() const;
  void clear_usersonline();
  static const int kUsersOnlineFieldNumber = 1;
  const ::std::string& usersonline(int index) const;
  ::std::string* mutable_usersonline(int index);
  void set_usersonline(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_usersonline(int index, ::std::string&& value);
  #endif
  void set_usersonline(int index, const char* value);
  void set_usersonline(int index, const char* value, size_t size);
  ::std::string* add_usersonline();
  void add_usersonline(const ::std::string& value);
  #if LANG_CXX11
  void add_usersonline(::std::string&& value);
  #endif
  void add_usersonline(const char* value);
  void add_usersonline(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& usersonline() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_usersonline();

  // @@protoc_insertion_point(class_scope:p2p.GetUsersOnlineRespond)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> usersonline_;
  friend struct ::protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.NotifyRequest) */ {
 public:
  NotifyRequest();
  virtual ~NotifyRequest();

  NotifyRequest(const NotifyRequest& from);

  inline NotifyRequest& operator=(const NotifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyRequest(NotifyRequest&& from) noexcept
    : NotifyRequest() {
    *this = ::std::move(from);
  }

  inline NotifyRequest& operator=(NotifyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyRequest* internal_default_instance() {
    return reinterpret_cast<const NotifyRequest*>(
               &_NotifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NotifyRequest* other);
  friend void swap(NotifyRequest& a, NotifyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyRequest* New() const final {
    return CreateMaybeMessage<NotifyRequest>(NULL);
  }

  NotifyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyRequest& from);
  void MergeFrom(const NotifyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string peerIdentity = 1;
  bool has_peeridentity() const;
  void clear_peeridentity();
  static const int kPeerIdentityFieldNumber = 1;
  const ::std::string& peeridentity() const;
  void set_peeridentity(const ::std::string& value);
  #if LANG_CXX11
  void set_peeridentity(::std::string&& value);
  #endif
  void set_peeridentity(const char* value);
  void set_peeridentity(const char* value, size_t size);
  ::std::string* mutable_peeridentity();
  ::std::string* release_peeridentity();
  void set_allocated_peeridentity(::std::string* peeridentity);

  // optional bytes payload = 2;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:p2p.NotifyRequest)
 private:
  void set_has_peeridentity();
  void clear_has_peeridentity();
  void set_has_payload();
  void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr peeridentity_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  friend struct ::protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyRespond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.NotifyRespond) */ {
 public:
  NotifyRespond();
  virtual ~NotifyRespond();

  NotifyRespond(const NotifyRespond& from);

  inline NotifyRespond& operator=(const NotifyRespond& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyRespond(NotifyRespond&& from) noexcept
    : NotifyRespond() {
    *this = ::std::move(from);
  }

  inline NotifyRespond& operator=(NotifyRespond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyRespond* internal_default_instance() {
    return reinterpret_cast<const NotifyRespond*>(
               &_NotifyRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NotifyRespond* other);
  friend void swap(NotifyRespond& a, NotifyRespond& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyRespond* New() const final {
    return CreateMaybeMessage<NotifyRespond>(NULL);
  }

  NotifyRespond* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyRespond>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyRespond& from);
  void MergeFrom(const NotifyRespond& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyRespond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes payload = 2;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // required .p2p.StatusType statusType = 1 [default = SUCCESS];
  bool has_statustype() const;
  void clear_statustype();
  static const int kStatusTypeFieldNumber = 1;
  ::p2p::StatusType statustype() const;
  void set_statustype(::p2p::StatusType value);

  // @@protoc_insertion_point(class_scope:p2p.NotifyRespond)
 private:
  void set_has_statustype();
  void clear_has_statustype();
  void set_has_payload();
  void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  int statustype_;
  friend struct ::protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HelloRespond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.HelloRespond) */ {
 public:
  HelloRespond();
  virtual ~HelloRespond();

  HelloRespond(const HelloRespond& from);

  inline HelloRespond& operator=(const HelloRespond& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloRespond(HelloRespond&& from) noexcept
    : HelloRespond() {
    *this = ::std::move(from);
  }

  inline HelloRespond& operator=(HelloRespond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloRespond* internal_default_instance() {
    return reinterpret_cast<const HelloRespond*>(
               &_HelloRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(HelloRespond* other);
  friend void swap(HelloRespond& a, HelloRespond& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloRespond* New() const final {
    return CreateMaybeMessage<HelloRespond>(NULL);
  }

  HelloRespond* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HelloRespond>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HelloRespond& from);
  void MergeFrom(const HelloRespond& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRespond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .p2p.StatusType statusType = 1 [default = SUCCESS];
  bool has_statustype() const;
  void clear_statustype();
  static const int kStatusTypeFieldNumber = 1;
  ::p2p::StatusType statustype() const;
  void set_statustype(::p2p::StatusType value);

  // @@protoc_insertion_point(class_scope:p2p.HelloRespond)
 private:
  void set_has_statustype();
  void clear_has_statustype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int statustype_;
  friend struct ::protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PacketRequst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.PacketRequst) */ {
 public:
  PacketRequst();
  virtual ~PacketRequst();

  PacketRequst(const PacketRequst& from);

  inline PacketRequst& operator=(const PacketRequst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PacketRequst(PacketRequst&& from) noexcept
    : PacketRequst() {
    *this = ::std::move(from);
  }

  inline PacketRequst& operator=(PacketRequst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketRequst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PacketRequst* internal_default_instance() {
    return reinterpret_cast<const PacketRequst*>(
               &_PacketRequst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PacketRequst* other);
  friend void swap(PacketRequst& a, PacketRequst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PacketRequst* New() const final {
    return CreateMaybeMessage<PacketRequst>(NULL);
  }

  PacketRequst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PacketRequst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PacketRequst& from);
  void MergeFrom(const PacketRequst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketRequst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string peerIdentity = 2;
  bool has_peeridentity() const;
  void clear_peeridentity();
  static const int kPeerIdentityFieldNumber = 2;
  const ::std::string& peeridentity() const;
  void set_peeridentity(const ::std::string& value);
  #if LANG_CXX11
  void set_peeridentity(::std::string&& value);
  #endif
  void set_peeridentity(const char* value);
  void set_peeridentity(const char* value, size_t size);
  ::std::string* mutable_peeridentity();
  ::std::string* release_peeridentity();
  void set_allocated_peeridentity(::std::string* peeridentity);

  // optional string version = 5 [default = "0.1.0"];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional .p2p.ConnectRequest connectRequest = 3;
  bool has_connectrequest() const;
  void clear_connectrequest();
  static const int kConnectRequestFieldNumber = 3;
  private:
  const ::p2p::ConnectRequest& _internal_connectrequest() const;
  public:
  const ::p2p::ConnectRequest& connectrequest() const;
  ::p2p::ConnectRequest* release_connectrequest();
  ::p2p::ConnectRequest* mutable_connectrequest();
  void set_allocated_connectrequest(::p2p::ConnectRequest* connectrequest);

  // optional .p2p.NotifyRequest notifyRequest = 4;
  bool has_notifyrequest() const;
  void clear_notifyrequest();
  static const int kNotifyRequestFieldNumber = 4;
  private:
  const ::p2p::NotifyRequest& _internal_notifyrequest() const;
  public:
  const ::p2p::NotifyRequest& notifyrequest() const;
  ::p2p::NotifyRequest* release_notifyrequest();
  ::p2p::NotifyRequest* mutable_notifyrequest();
  void set_allocated_notifyrequest(::p2p::NotifyRequest* notifyrequest);

  // required .p2p.RPCAPI rpcApi = 1;
  bool has_rpcapi() const;
  void clear_rpcapi();
  static const int kRpcApiFieldNumber = 1;
  ::p2p::RPCAPI rpcapi() const;
  void set_rpcapi(::p2p::RPCAPI value);

  // @@protoc_insertion_point(class_scope:p2p.PacketRequst)
 private:
  void set_has_rpcapi();
  void clear_has_rpcapi();
  void set_has_peeridentity();
  void clear_has_peeridentity();
  void set_has_connectrequest();
  void clear_has_connectrequest();
  void set_has_notifyrequest();
  void clear_has_notifyrequest();
  void set_has_version();
  void clear_has_version();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr peeridentity_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_version_;
  private:
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::p2p::ConnectRequest* connectrequest_;
  ::p2p::NotifyRequest* notifyrequest_;
  int rpcapi_;
  friend struct ::protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PacketRespond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.PacketRespond) */ {
 public:
  PacketRespond();
  virtual ~PacketRespond();

  PacketRespond(const PacketRespond& from);

  inline PacketRespond& operator=(const PacketRespond& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PacketRespond(PacketRespond&& from) noexcept
    : PacketRespond() {
    *this = ::std::move(from);
  }

  inline PacketRespond& operator=(PacketRespond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PacketRespond* internal_default_instance() {
    return reinterpret_cast<const PacketRespond*>(
               &_PacketRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PacketRespond* other);
  friend void swap(PacketRespond& a, PacketRespond& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PacketRespond* New() const final {
    return CreateMaybeMessage<PacketRespond>(NULL);
  }

  PacketRespond* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PacketRespond>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PacketRespond& from);
  void MergeFrom(const PacketRespond& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketRespond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 6 [default = "0.1.0"];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 6;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional .p2p.ConnectRespond connectRespond = 2;
  bool has_connectrespond() const;
  void clear_connectrespond();
  static const int kConnectRespondFieldNumber = 2;
  private:
  const ::p2p::ConnectRespond& _internal_connectrespond() const;
  public:
  const ::p2p::ConnectRespond& connectrespond() const;
  ::p2p::ConnectRespond* release_connectrespond();
  ::p2p::ConnectRespond* mutable_connectrespond();
  void set_allocated_connectrespond(::p2p::ConnectRespond* connectrespond);

  // optional .p2p.GetUsersOnlineRespond getUsersOnlineRespond = 3;
  bool has_getusersonlinerespond() const;
  void clear_getusersonlinerespond();
  static const int kGetUsersOnlineRespondFieldNumber = 3;
  private:
  const ::p2p::GetUsersOnlineRespond& _internal_getusersonlinerespond() const;
  public:
  const ::p2p::GetUsersOnlineRespond& getusersonlinerespond() const;
  ::p2p::GetUsersOnlineRespond* release_getusersonlinerespond();
  ::p2p::GetUsersOnlineRespond* mutable_getusersonlinerespond();
  void set_allocated_getusersonlinerespond(::p2p::GetUsersOnlineRespond* getusersonlinerespond);

  // optional .p2p.NotifyRespond notifyRespond = 4;
  bool has_notifyrespond() const;
  void clear_notifyrespond();
  static const int kNotifyRespondFieldNumber = 4;
  private:
  const ::p2p::NotifyRespond& _internal_notifyrespond() const;
  public:
  const ::p2p::NotifyRespond& notifyrespond() const;
  ::p2p::NotifyRespond* release_notifyrespond();
  ::p2p::NotifyRespond* mutable_notifyrespond();
  void set_allocated_notifyrespond(::p2p::NotifyRespond* notifyrespond);

  // optional .p2p.HelloRespond helloRespond = 5;
  bool has_hellorespond() const;
  void clear_hellorespond();
  static const int kHelloRespondFieldNumber = 5;
  private:
  const ::p2p::HelloRespond& _internal_hellorespond() const;
  public:
  const ::p2p::HelloRespond& hellorespond() const;
  ::p2p::HelloRespond* release_hellorespond();
  ::p2p::HelloRespond* mutable_hellorespond();
  void set_allocated_hellorespond(::p2p::HelloRespond* hellorespond);

  // required .p2p.RPCAPI rpcApi = 1;
  bool has_rpcapi() const;
  void clear_rpcapi();
  static const int kRpcApiFieldNumber = 1;
  ::p2p::RPCAPI rpcapi() const;
  void set_rpcapi(::p2p::RPCAPI value);

  // @@protoc_insertion_point(class_scope:p2p.PacketRespond)
 private:
  void set_has_rpcapi();
  void clear_has_rpcapi();
  void set_has_connectrespond();
  void clear_has_connectrespond();
  void set_has_getusersonlinerespond();
  void clear_has_getusersonlinerespond();
  void set_has_notifyrespond();
  void clear_has_notifyrespond();
  void set_has_hellorespond();
  void clear_has_hellorespond();
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_version_;
  private:
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::p2p::ConnectRespond* connectrespond_;
  ::p2p::GetUsersOnlineRespond* getusersonlinerespond_;
  ::p2p::NotifyRespond* notifyrespond_;
  ::p2p::HelloRespond* hellorespond_;
  int rpcapi_;
  friend struct ::protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Address* other);
  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(NULL);
  }

  Address* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string address = 2;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // required string id = 4;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 4;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required int32 port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:p2p.Address)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_address();
  void clear_has_address();
  void set_has_port();
  void clear_has_port();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p2p.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(NULL);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 3 [default = "0.1.0"];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional .p2p.Address address = 2;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  private:
  const ::p2p::Address& _internal_address() const;
  public:
  const ::p2p::Address& address() const;
  ::p2p::Address* release_address();
  ::p2p::Address* mutable_address();
  void set_allocated_address(::p2p::Address* address);

  // required .p2p.MessageType t = 1 [default = ADDRESS];
  bool has_t() const;
  void clear_t();
  static const int kTFieldNumber = 1;
  ::p2p::MessageType t() const;
  void set_t(::p2p::MessageType value);

  // @@protoc_insertion_point(class_scope:p2p.Message)
 private:
  void set_has_t();
  void clear_has_t();
  void set_has_address();
  void clear_has_address();
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_version_;
  private:
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::p2p::Address* address_;
  int t_;
  friend struct ::protobuf_peer_2dto_2dpeer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectRequest

// required string peerIdentity = 1;
inline bool ConnectRequest::has_peeridentity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectRequest::set_has_peeridentity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectRequest::clear_has_peeridentity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectRequest::clear_peeridentity() {
  peeridentity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peeridentity();
}
inline const ::std::string& ConnectRequest::peeridentity() const {
  // @@protoc_insertion_point(field_get:p2p.ConnectRequest.peerIdentity)
  return peeridentity_.GetNoArena();
}
inline void ConnectRequest::set_peeridentity(const ::std::string& value) {
  set_has_peeridentity();
  peeridentity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.ConnectRequest.peerIdentity)
}
#if LANG_CXX11
inline void ConnectRequest::set_peeridentity(::std::string&& value) {
  set_has_peeridentity();
  peeridentity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.ConnectRequest.peerIdentity)
}
#endif
inline void ConnectRequest::set_peeridentity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peeridentity();
  peeridentity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.ConnectRequest.peerIdentity)
}
inline void ConnectRequest::set_peeridentity(const char* value, size_t size) {
  set_has_peeridentity();
  peeridentity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.ConnectRequest.peerIdentity)
}
inline ::std::string* ConnectRequest::mutable_peeridentity() {
  set_has_peeridentity();
  // @@protoc_insertion_point(field_mutable:p2p.ConnectRequest.peerIdentity)
  return peeridentity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectRequest::release_peeridentity() {
  // @@protoc_insertion_point(field_release:p2p.ConnectRequest.peerIdentity)
  if (!has_peeridentity()) {
    return NULL;
  }
  clear_has_peeridentity();
  return peeridentity_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectRequest::set_allocated_peeridentity(::std::string* peeridentity) {
  if (peeridentity != NULL) {
    set_has_peeridentity();
  } else {
    clear_has_peeridentity();
  }
  peeridentity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peeridentity);
  // @@protoc_insertion_point(field_set_allocated:p2p.ConnectRequest.peerIdentity)
}

// -------------------------------------------------------------------

// ConnectRespond

// required .p2p.StatusType statusType = 1 [default = SUCCESS];
inline bool ConnectRespond::has_statustype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectRespond::set_has_statustype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectRespond::clear_has_statustype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectRespond::clear_statustype() {
  statustype_ = 1;
  clear_has_statustype();
}
inline ::p2p::StatusType ConnectRespond::statustype() const {
  // @@protoc_insertion_point(field_get:p2p.ConnectRespond.statusType)
  return static_cast< ::p2p::StatusType >(statustype_);
}
inline void ConnectRespond::set_statustype(::p2p::StatusType value) {
  assert(::p2p::StatusType_IsValid(value));
  set_has_statustype();
  statustype_ = value;
  // @@protoc_insertion_point(field_set:p2p.ConnectRespond.statusType)
}

// -------------------------------------------------------------------

// GetUsersOnlineRespond

// repeated string usersOnline = 1;
inline int GetUsersOnlineRespond::usersonline_size() const {
  return usersonline_.size();
}
inline void GetUsersOnlineRespond::clear_usersonline() {
  usersonline_.Clear();
}
inline const ::std::string& GetUsersOnlineRespond::usersonline(int index) const {
  // @@protoc_insertion_point(field_get:p2p.GetUsersOnlineRespond.usersOnline)
  return usersonline_.Get(index);
}
inline ::std::string* GetUsersOnlineRespond::mutable_usersonline(int index) {
  // @@protoc_insertion_point(field_mutable:p2p.GetUsersOnlineRespond.usersOnline)
  return usersonline_.Mutable(index);
}
inline void GetUsersOnlineRespond::set_usersonline(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:p2p.GetUsersOnlineRespond.usersOnline)
  usersonline_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetUsersOnlineRespond::set_usersonline(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:p2p.GetUsersOnlineRespond.usersOnline)
  usersonline_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetUsersOnlineRespond::set_usersonline(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  usersonline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p2p.GetUsersOnlineRespond.usersOnline)
}
inline void GetUsersOnlineRespond::set_usersonline(int index, const char* value, size_t size) {
  usersonline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p2p.GetUsersOnlineRespond.usersOnline)
}
inline ::std::string* GetUsersOnlineRespond::add_usersonline() {
  // @@protoc_insertion_point(field_add_mutable:p2p.GetUsersOnlineRespond.usersOnline)
  return usersonline_.Add();
}
inline void GetUsersOnlineRespond::add_usersonline(const ::std::string& value) {
  usersonline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p2p.GetUsersOnlineRespond.usersOnline)
}
#if LANG_CXX11
inline void GetUsersOnlineRespond::add_usersonline(::std::string&& value) {
  usersonline_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p2p.GetUsersOnlineRespond.usersOnline)
}
#endif
inline void GetUsersOnlineRespond::add_usersonline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  usersonline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p2p.GetUsersOnlineRespond.usersOnline)
}
inline void GetUsersOnlineRespond::add_usersonline(const char* value, size_t size) {
  usersonline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p2p.GetUsersOnlineRespond.usersOnline)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetUsersOnlineRespond::usersonline() const {
  // @@protoc_insertion_point(field_list:p2p.GetUsersOnlineRespond.usersOnline)
  return usersonline_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetUsersOnlineRespond::mutable_usersonline() {
  // @@protoc_insertion_point(field_mutable_list:p2p.GetUsersOnlineRespond.usersOnline)
  return &usersonline_;
}

// -------------------------------------------------------------------

// NotifyRequest

// required string peerIdentity = 1;
inline bool NotifyRequest::has_peeridentity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyRequest::set_has_peeridentity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyRequest::clear_has_peeridentity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyRequest::clear_peeridentity() {
  peeridentity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peeridentity();
}
inline const ::std::string& NotifyRequest::peeridentity() const {
  // @@protoc_insertion_point(field_get:p2p.NotifyRequest.peerIdentity)
  return peeridentity_.GetNoArena();
}
inline void NotifyRequest::set_peeridentity(const ::std::string& value) {
  set_has_peeridentity();
  peeridentity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.NotifyRequest.peerIdentity)
}
#if LANG_CXX11
inline void NotifyRequest::set_peeridentity(::std::string&& value) {
  set_has_peeridentity();
  peeridentity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.NotifyRequest.peerIdentity)
}
#endif
inline void NotifyRequest::set_peeridentity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peeridentity();
  peeridentity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.NotifyRequest.peerIdentity)
}
inline void NotifyRequest::set_peeridentity(const char* value, size_t size) {
  set_has_peeridentity();
  peeridentity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.NotifyRequest.peerIdentity)
}
inline ::std::string* NotifyRequest::mutable_peeridentity() {
  set_has_peeridentity();
  // @@protoc_insertion_point(field_mutable:p2p.NotifyRequest.peerIdentity)
  return peeridentity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyRequest::release_peeridentity() {
  // @@protoc_insertion_point(field_release:p2p.NotifyRequest.peerIdentity)
  if (!has_peeridentity()) {
    return NULL;
  }
  clear_has_peeridentity();
  return peeridentity_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyRequest::set_allocated_peeridentity(::std::string* peeridentity) {
  if (peeridentity != NULL) {
    set_has_peeridentity();
  } else {
    clear_has_peeridentity();
  }
  peeridentity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peeridentity);
  // @@protoc_insertion_point(field_set_allocated:p2p.NotifyRequest.peerIdentity)
}

// optional bytes payload = 2;
inline bool NotifyRequest::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyRequest::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyRequest::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyRequest::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
inline const ::std::string& NotifyRequest::payload() const {
  // @@protoc_insertion_point(field_get:p2p.NotifyRequest.payload)
  return payload_.GetNoArena();
}
inline void NotifyRequest::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.NotifyRequest.payload)
}
#if LANG_CXX11
inline void NotifyRequest::set_payload(::std::string&& value) {
  set_has_payload();
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.NotifyRequest.payload)
}
#endif
inline void NotifyRequest::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.NotifyRequest.payload)
}
inline void NotifyRequest::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.NotifyRequest.payload)
}
inline ::std::string* NotifyRequest::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:p2p.NotifyRequest.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyRequest::release_payload() {
  // @@protoc_insertion_point(field_release:p2p.NotifyRequest.payload)
  if (!has_payload()) {
    return NULL;
  }
  clear_has_payload();
  return payload_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyRequest::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:p2p.NotifyRequest.payload)
}

// -------------------------------------------------------------------

// NotifyRespond

// required .p2p.StatusType statusType = 1 [default = SUCCESS];
inline bool NotifyRespond::has_statustype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyRespond::set_has_statustype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyRespond::clear_has_statustype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyRespond::clear_statustype() {
  statustype_ = 1;
  clear_has_statustype();
}
inline ::p2p::StatusType NotifyRespond::statustype() const {
  // @@protoc_insertion_point(field_get:p2p.NotifyRespond.statusType)
  return static_cast< ::p2p::StatusType >(statustype_);
}
inline void NotifyRespond::set_statustype(::p2p::StatusType value) {
  assert(::p2p::StatusType_IsValid(value));
  set_has_statustype();
  statustype_ = value;
  // @@protoc_insertion_point(field_set:p2p.NotifyRespond.statusType)
}

// optional bytes payload = 2;
inline bool NotifyRespond::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyRespond::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyRespond::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyRespond::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
inline const ::std::string& NotifyRespond::payload() const {
  // @@protoc_insertion_point(field_get:p2p.NotifyRespond.payload)
  return payload_.GetNoArena();
}
inline void NotifyRespond::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.NotifyRespond.payload)
}
#if LANG_CXX11
inline void NotifyRespond::set_payload(::std::string&& value) {
  set_has_payload();
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.NotifyRespond.payload)
}
#endif
inline void NotifyRespond::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.NotifyRespond.payload)
}
inline void NotifyRespond::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.NotifyRespond.payload)
}
inline ::std::string* NotifyRespond::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:p2p.NotifyRespond.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyRespond::release_payload() {
  // @@protoc_insertion_point(field_release:p2p.NotifyRespond.payload)
  if (!has_payload()) {
    return NULL;
  }
  clear_has_payload();
  return payload_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyRespond::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:p2p.NotifyRespond.payload)
}

// -------------------------------------------------------------------

// HelloRespond

// required .p2p.StatusType statusType = 1 [default = SUCCESS];
inline bool HelloRespond::has_statustype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloRespond::set_has_statustype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelloRespond::clear_has_statustype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelloRespond::clear_statustype() {
  statustype_ = 1;
  clear_has_statustype();
}
inline ::p2p::StatusType HelloRespond::statustype() const {
  // @@protoc_insertion_point(field_get:p2p.HelloRespond.statusType)
  return static_cast< ::p2p::StatusType >(statustype_);
}
inline void HelloRespond::set_statustype(::p2p::StatusType value) {
  assert(::p2p::StatusType_IsValid(value));
  set_has_statustype();
  statustype_ = value;
  // @@protoc_insertion_point(field_set:p2p.HelloRespond.statusType)
}

// -------------------------------------------------------------------

// PacketRequst

// required .p2p.RPCAPI rpcApi = 1;
inline bool PacketRequst::has_rpcapi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PacketRequst::set_has_rpcapi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PacketRequst::clear_has_rpcapi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PacketRequst::clear_rpcapi() {
  rpcapi_ = 1;
  clear_has_rpcapi();
}
inline ::p2p::RPCAPI PacketRequst::rpcapi() const {
  // @@protoc_insertion_point(field_get:p2p.PacketRequst.rpcApi)
  return static_cast< ::p2p::RPCAPI >(rpcapi_);
}
inline void PacketRequst::set_rpcapi(::p2p::RPCAPI value) {
  assert(::p2p::RPCAPI_IsValid(value));
  set_has_rpcapi();
  rpcapi_ = value;
  // @@protoc_insertion_point(field_set:p2p.PacketRequst.rpcApi)
}

// required string peerIdentity = 2;
inline bool PacketRequst::has_peeridentity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketRequst::set_has_peeridentity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketRequst::clear_has_peeridentity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketRequst::clear_peeridentity() {
  peeridentity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peeridentity();
}
inline const ::std::string& PacketRequst::peeridentity() const {
  // @@protoc_insertion_point(field_get:p2p.PacketRequst.peerIdentity)
  return peeridentity_.GetNoArena();
}
inline void PacketRequst::set_peeridentity(const ::std::string& value) {
  set_has_peeridentity();
  peeridentity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.PacketRequst.peerIdentity)
}
#if LANG_CXX11
inline void PacketRequst::set_peeridentity(::std::string&& value) {
  set_has_peeridentity();
  peeridentity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.PacketRequst.peerIdentity)
}
#endif
inline void PacketRequst::set_peeridentity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peeridentity();
  peeridentity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.PacketRequst.peerIdentity)
}
inline void PacketRequst::set_peeridentity(const char* value, size_t size) {
  set_has_peeridentity();
  peeridentity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.PacketRequst.peerIdentity)
}
inline ::std::string* PacketRequst::mutable_peeridentity() {
  set_has_peeridentity();
  // @@protoc_insertion_point(field_mutable:p2p.PacketRequst.peerIdentity)
  return peeridentity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketRequst::release_peeridentity() {
  // @@protoc_insertion_point(field_release:p2p.PacketRequst.peerIdentity)
  if (!has_peeridentity()) {
    return NULL;
  }
  clear_has_peeridentity();
  return peeridentity_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketRequst::set_allocated_peeridentity(::std::string* peeridentity) {
  if (peeridentity != NULL) {
    set_has_peeridentity();
  } else {
    clear_has_peeridentity();
  }
  peeridentity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peeridentity);
  // @@protoc_insertion_point(field_set_allocated:p2p.PacketRequst.peerIdentity)
}

// optional .p2p.ConnectRequest connectRequest = 3;
inline bool PacketRequst::has_connectrequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PacketRequst::set_has_connectrequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PacketRequst::clear_has_connectrequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PacketRequst::clear_connectrequest() {
  if (connectrequest_ != NULL) connectrequest_->Clear();
  clear_has_connectrequest();
}
inline const ::p2p::ConnectRequest& PacketRequst::_internal_connectrequest() const {
  return *connectrequest_;
}
inline const ::p2p::ConnectRequest& PacketRequst::connectrequest() const {
  const ::p2p::ConnectRequest* p = connectrequest_;
  // @@protoc_insertion_point(field_get:p2p.PacketRequst.connectRequest)
  return p != NULL ? *p : *reinterpret_cast<const ::p2p::ConnectRequest*>(
      &::p2p::_ConnectRequest_default_instance_);
}
inline ::p2p::ConnectRequest* PacketRequst::release_connectrequest() {
  // @@protoc_insertion_point(field_release:p2p.PacketRequst.connectRequest)
  clear_has_connectrequest();
  ::p2p::ConnectRequest* temp = connectrequest_;
  connectrequest_ = NULL;
  return temp;
}
inline ::p2p::ConnectRequest* PacketRequst::mutable_connectrequest() {
  set_has_connectrequest();
  if (connectrequest_ == NULL) {
    auto* p = CreateMaybeMessage<::p2p::ConnectRequest>(GetArenaNoVirtual());
    connectrequest_ = p;
  }
  // @@protoc_insertion_point(field_mutable:p2p.PacketRequst.connectRequest)
  return connectrequest_;
}
inline void PacketRequst::set_allocated_connectrequest(::p2p::ConnectRequest* connectrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete connectrequest_;
  }
  if (connectrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connectrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connectrequest, submessage_arena);
    }
    set_has_connectrequest();
  } else {
    clear_has_connectrequest();
  }
  connectrequest_ = connectrequest;
  // @@protoc_insertion_point(field_set_allocated:p2p.PacketRequst.connectRequest)
}

// optional .p2p.NotifyRequest notifyRequest = 4;
inline bool PacketRequst::has_notifyrequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PacketRequst::set_has_notifyrequest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PacketRequst::clear_has_notifyrequest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PacketRequst::clear_notifyrequest() {
  if (notifyrequest_ != NULL) notifyrequest_->Clear();
  clear_has_notifyrequest();
}
inline const ::p2p::NotifyRequest& PacketRequst::_internal_notifyrequest() const {
  return *notifyrequest_;
}
inline const ::p2p::NotifyRequest& PacketRequst::notifyrequest() const {
  const ::p2p::NotifyRequest* p = notifyrequest_;
  // @@protoc_insertion_point(field_get:p2p.PacketRequst.notifyRequest)
  return p != NULL ? *p : *reinterpret_cast<const ::p2p::NotifyRequest*>(
      &::p2p::_NotifyRequest_default_instance_);
}
inline ::p2p::NotifyRequest* PacketRequst::release_notifyrequest() {
  // @@protoc_insertion_point(field_release:p2p.PacketRequst.notifyRequest)
  clear_has_notifyrequest();
  ::p2p::NotifyRequest* temp = notifyrequest_;
  notifyrequest_ = NULL;
  return temp;
}
inline ::p2p::NotifyRequest* PacketRequst::mutable_notifyrequest() {
  set_has_notifyrequest();
  if (notifyrequest_ == NULL) {
    auto* p = CreateMaybeMessage<::p2p::NotifyRequest>(GetArenaNoVirtual());
    notifyrequest_ = p;
  }
  // @@protoc_insertion_point(field_mutable:p2p.PacketRequst.notifyRequest)
  return notifyrequest_;
}
inline void PacketRequst::set_allocated_notifyrequest(::p2p::NotifyRequest* notifyrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete notifyrequest_;
  }
  if (notifyrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      notifyrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, notifyrequest, submessage_arena);
    }
    set_has_notifyrequest();
  } else {
    clear_has_notifyrequest();
  }
  notifyrequest_ = notifyrequest;
  // @@protoc_insertion_point(field_set_allocated:p2p.PacketRequst.notifyRequest)
}

// optional string version = 5 [default = "0.1.0"];
inline bool PacketRequst::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketRequst::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketRequst::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketRequst::clear_version() {
  version_.ClearToDefaultNoArena(&::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get());
  clear_has_version();
}
inline const ::std::string& PacketRequst::version() const {
  // @@protoc_insertion_point(field_get:p2p.PacketRequst.version)
  return version_.GetNoArena();
}
inline void PacketRequst::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get(), value);
  // @@protoc_insertion_point(field_set:p2p.PacketRequst.version)
}
#if LANG_CXX11
inline void PacketRequst::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.PacketRequst.version)
}
#endif
inline void PacketRequst::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.PacketRequst.version)
}
inline void PacketRequst::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.PacketRequst.version)
}
inline ::std::string* PacketRequst::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:p2p.PacketRequst.version)
  return version_.MutableNoArena(&::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get());
}
inline ::std::string* PacketRequst::release_version() {
  // @@protoc_insertion_point(field_release:p2p.PacketRequst.version)
  if (!has_version()) {
    return NULL;
  }
  clear_has_version();
  return version_.ReleaseNonDefaultNoArena(&::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get());
}
inline void PacketRequst::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get(), version);
  // @@protoc_insertion_point(field_set_allocated:p2p.PacketRequst.version)
}

// -------------------------------------------------------------------

// PacketRespond

// required .p2p.RPCAPI rpcApi = 1;
inline bool PacketRespond::has_rpcapi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PacketRespond::set_has_rpcapi() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PacketRespond::clear_has_rpcapi() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PacketRespond::clear_rpcapi() {
  rpcapi_ = 1;
  clear_has_rpcapi();
}
inline ::p2p::RPCAPI PacketRespond::rpcapi() const {
  // @@protoc_insertion_point(field_get:p2p.PacketRespond.rpcApi)
  return static_cast< ::p2p::RPCAPI >(rpcapi_);
}
inline void PacketRespond::set_rpcapi(::p2p::RPCAPI value) {
  assert(::p2p::RPCAPI_IsValid(value));
  set_has_rpcapi();
  rpcapi_ = value;
  // @@protoc_insertion_point(field_set:p2p.PacketRespond.rpcApi)
}

// optional .p2p.ConnectRespond connectRespond = 2;
inline bool PacketRespond::has_connectrespond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketRespond::set_has_connectrespond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketRespond::clear_has_connectrespond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketRespond::clear_connectrespond() {
  if (connectrespond_ != NULL) connectrespond_->Clear();
  clear_has_connectrespond();
}
inline const ::p2p::ConnectRespond& PacketRespond::_internal_connectrespond() const {
  return *connectrespond_;
}
inline const ::p2p::ConnectRespond& PacketRespond::connectrespond() const {
  const ::p2p::ConnectRespond* p = connectrespond_;
  // @@protoc_insertion_point(field_get:p2p.PacketRespond.connectRespond)
  return p != NULL ? *p : *reinterpret_cast<const ::p2p::ConnectRespond*>(
      &::p2p::_ConnectRespond_default_instance_);
}
inline ::p2p::ConnectRespond* PacketRespond::release_connectrespond() {
  // @@protoc_insertion_point(field_release:p2p.PacketRespond.connectRespond)
  clear_has_connectrespond();
  ::p2p::ConnectRespond* temp = connectrespond_;
  connectrespond_ = NULL;
  return temp;
}
inline ::p2p::ConnectRespond* PacketRespond::mutable_connectrespond() {
  set_has_connectrespond();
  if (connectrespond_ == NULL) {
    auto* p = CreateMaybeMessage<::p2p::ConnectRespond>(GetArenaNoVirtual());
    connectrespond_ = p;
  }
  // @@protoc_insertion_point(field_mutable:p2p.PacketRespond.connectRespond)
  return connectrespond_;
}
inline void PacketRespond::set_allocated_connectrespond(::p2p::ConnectRespond* connectrespond) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete connectrespond_;
  }
  if (connectrespond) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connectrespond = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connectrespond, submessage_arena);
    }
    set_has_connectrespond();
  } else {
    clear_has_connectrespond();
  }
  connectrespond_ = connectrespond;
  // @@protoc_insertion_point(field_set_allocated:p2p.PacketRespond.connectRespond)
}

// optional .p2p.GetUsersOnlineRespond getUsersOnlineRespond = 3;
inline bool PacketRespond::has_getusersonlinerespond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PacketRespond::set_has_getusersonlinerespond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PacketRespond::clear_has_getusersonlinerespond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PacketRespond::clear_getusersonlinerespond() {
  if (getusersonlinerespond_ != NULL) getusersonlinerespond_->Clear();
  clear_has_getusersonlinerespond();
}
inline const ::p2p::GetUsersOnlineRespond& PacketRespond::_internal_getusersonlinerespond() const {
  return *getusersonlinerespond_;
}
inline const ::p2p::GetUsersOnlineRespond& PacketRespond::getusersonlinerespond() const {
  const ::p2p::GetUsersOnlineRespond* p = getusersonlinerespond_;
  // @@protoc_insertion_point(field_get:p2p.PacketRespond.getUsersOnlineRespond)
  return p != NULL ? *p : *reinterpret_cast<const ::p2p::GetUsersOnlineRespond*>(
      &::p2p::_GetUsersOnlineRespond_default_instance_);
}
inline ::p2p::GetUsersOnlineRespond* PacketRespond::release_getusersonlinerespond() {
  // @@protoc_insertion_point(field_release:p2p.PacketRespond.getUsersOnlineRespond)
  clear_has_getusersonlinerespond();
  ::p2p::GetUsersOnlineRespond* temp = getusersonlinerespond_;
  getusersonlinerespond_ = NULL;
  return temp;
}
inline ::p2p::GetUsersOnlineRespond* PacketRespond::mutable_getusersonlinerespond() {
  set_has_getusersonlinerespond();
  if (getusersonlinerespond_ == NULL) {
    auto* p = CreateMaybeMessage<::p2p::GetUsersOnlineRespond>(GetArenaNoVirtual());
    getusersonlinerespond_ = p;
  }
  // @@protoc_insertion_point(field_mutable:p2p.PacketRespond.getUsersOnlineRespond)
  return getusersonlinerespond_;
}
inline void PacketRespond::set_allocated_getusersonlinerespond(::p2p::GetUsersOnlineRespond* getusersonlinerespond) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete getusersonlinerespond_;
  }
  if (getusersonlinerespond) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      getusersonlinerespond = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, getusersonlinerespond, submessage_arena);
    }
    set_has_getusersonlinerespond();
  } else {
    clear_has_getusersonlinerespond();
  }
  getusersonlinerespond_ = getusersonlinerespond;
  // @@protoc_insertion_point(field_set_allocated:p2p.PacketRespond.getUsersOnlineRespond)
}

// optional .p2p.NotifyRespond notifyRespond = 4;
inline bool PacketRespond::has_notifyrespond() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PacketRespond::set_has_notifyrespond() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PacketRespond::clear_has_notifyrespond() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PacketRespond::clear_notifyrespond() {
  if (notifyrespond_ != NULL) notifyrespond_->Clear();
  clear_has_notifyrespond();
}
inline const ::p2p::NotifyRespond& PacketRespond::_internal_notifyrespond() const {
  return *notifyrespond_;
}
inline const ::p2p::NotifyRespond& PacketRespond::notifyrespond() const {
  const ::p2p::NotifyRespond* p = notifyrespond_;
  // @@protoc_insertion_point(field_get:p2p.PacketRespond.notifyRespond)
  return p != NULL ? *p : *reinterpret_cast<const ::p2p::NotifyRespond*>(
      &::p2p::_NotifyRespond_default_instance_);
}
inline ::p2p::NotifyRespond* PacketRespond::release_notifyrespond() {
  // @@protoc_insertion_point(field_release:p2p.PacketRespond.notifyRespond)
  clear_has_notifyrespond();
  ::p2p::NotifyRespond* temp = notifyrespond_;
  notifyrespond_ = NULL;
  return temp;
}
inline ::p2p::NotifyRespond* PacketRespond::mutable_notifyrespond() {
  set_has_notifyrespond();
  if (notifyrespond_ == NULL) {
    auto* p = CreateMaybeMessage<::p2p::NotifyRespond>(GetArenaNoVirtual());
    notifyrespond_ = p;
  }
  // @@protoc_insertion_point(field_mutable:p2p.PacketRespond.notifyRespond)
  return notifyrespond_;
}
inline void PacketRespond::set_allocated_notifyrespond(::p2p::NotifyRespond* notifyrespond) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete notifyrespond_;
  }
  if (notifyrespond) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      notifyrespond = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, notifyrespond, submessage_arena);
    }
    set_has_notifyrespond();
  } else {
    clear_has_notifyrespond();
  }
  notifyrespond_ = notifyrespond;
  // @@protoc_insertion_point(field_set_allocated:p2p.PacketRespond.notifyRespond)
}

// optional .p2p.HelloRespond helloRespond = 5;
inline bool PacketRespond::has_hellorespond() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PacketRespond::set_has_hellorespond() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PacketRespond::clear_has_hellorespond() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PacketRespond::clear_hellorespond() {
  if (hellorespond_ != NULL) hellorespond_->Clear();
  clear_has_hellorespond();
}
inline const ::p2p::HelloRespond& PacketRespond::_internal_hellorespond() const {
  return *hellorespond_;
}
inline const ::p2p::HelloRespond& PacketRespond::hellorespond() const {
  const ::p2p::HelloRespond* p = hellorespond_;
  // @@protoc_insertion_point(field_get:p2p.PacketRespond.helloRespond)
  return p != NULL ? *p : *reinterpret_cast<const ::p2p::HelloRespond*>(
      &::p2p::_HelloRespond_default_instance_);
}
inline ::p2p::HelloRespond* PacketRespond::release_hellorespond() {
  // @@protoc_insertion_point(field_release:p2p.PacketRespond.helloRespond)
  clear_has_hellorespond();
  ::p2p::HelloRespond* temp = hellorespond_;
  hellorespond_ = NULL;
  return temp;
}
inline ::p2p::HelloRespond* PacketRespond::mutable_hellorespond() {
  set_has_hellorespond();
  if (hellorespond_ == NULL) {
    auto* p = CreateMaybeMessage<::p2p::HelloRespond>(GetArenaNoVirtual());
    hellorespond_ = p;
  }
  // @@protoc_insertion_point(field_mutable:p2p.PacketRespond.helloRespond)
  return hellorespond_;
}
inline void PacketRespond::set_allocated_hellorespond(::p2p::HelloRespond* hellorespond) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hellorespond_;
  }
  if (hellorespond) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hellorespond = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hellorespond, submessage_arena);
    }
    set_has_hellorespond();
  } else {
    clear_has_hellorespond();
  }
  hellorespond_ = hellorespond;
  // @@protoc_insertion_point(field_set_allocated:p2p.PacketRespond.helloRespond)
}

// optional string version = 6 [default = "0.1.0"];
inline bool PacketRespond::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketRespond::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketRespond::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketRespond::clear_version() {
  version_.ClearToDefaultNoArena(&::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get());
  clear_has_version();
}
inline const ::std::string& PacketRespond::version() const {
  // @@protoc_insertion_point(field_get:p2p.PacketRespond.version)
  return version_.GetNoArena();
}
inline void PacketRespond::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get(), value);
  // @@protoc_insertion_point(field_set:p2p.PacketRespond.version)
}
#if LANG_CXX11
inline void PacketRespond::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.PacketRespond.version)
}
#endif
inline void PacketRespond::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.PacketRespond.version)
}
inline void PacketRespond::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.PacketRespond.version)
}
inline ::std::string* PacketRespond::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:p2p.PacketRespond.version)
  return version_.MutableNoArena(&::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get());
}
inline ::std::string* PacketRespond::release_version() {
  // @@protoc_insertion_point(field_release:p2p.PacketRespond.version)
  if (!has_version()) {
    return NULL;
  }
  clear_has_version();
  return version_.ReleaseNonDefaultNoArena(&::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get());
}
inline void PacketRespond::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get(), version);
  // @@protoc_insertion_point(field_set_allocated:p2p.PacketRespond.version)
}

// -------------------------------------------------------------------

// Address

// required string id = 4;
inline bool Address::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Address::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Address::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Address::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Address::id() const {
  // @@protoc_insertion_point(field_get:p2p.Address.id)
  return id_.GetNoArena();
}
inline void Address::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.Address.id)
}
#if LANG_CXX11
inline void Address::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.Address.id)
}
#endif
inline void Address::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.Address.id)
}
inline void Address::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.Address.id)
}
inline ::std::string* Address::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:p2p.Address.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_id() {
  // @@protoc_insertion_point(field_release:p2p.Address.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:p2p.Address.id)
}

// required string address = 2;
inline bool Address::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Address::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Address::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Address::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& Address::address() const {
  // @@protoc_insertion_point(field_get:p2p.Address.address)
  return address_.GetNoArena();
}
inline void Address::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.Address.address)
}
#if LANG_CXX11
inline void Address::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.Address.address)
}
#endif
inline void Address::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.Address.address)
}
inline void Address::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.Address.address)
}
inline ::std::string* Address::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:p2p.Address.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_address() {
  // @@protoc_insertion_point(field_release:p2p.Address.address)
  if (!has_address()) {
    return NULL;
  }
  clear_has_address();
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:p2p.Address.address)
}

// required int32 port = 3;
inline bool Address::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Address::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Address::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Address::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Address::port() const {
  // @@protoc_insertion_point(field_get:p2p.Address.port)
  return port_;
}
inline void Address::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:p2p.Address.port)
}

// -------------------------------------------------------------------

// Message

// required .p2p.MessageType t = 1 [default = ADDRESS];
inline bool Message::has_t() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_t() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_t() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_t() {
  t_ = 1;
  clear_has_t();
}
inline ::p2p::MessageType Message::t() const {
  // @@protoc_insertion_point(field_get:p2p.Message.t)
  return static_cast< ::p2p::MessageType >(t_);
}
inline void Message::set_t(::p2p::MessageType value) {
  assert(::p2p::MessageType_IsValid(value));
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:p2p.Message.t)
}

// optional .p2p.Address address = 2;
inline bool Message::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_address() {
  if (address_ != NULL) address_->Clear();
  clear_has_address();
}
inline const ::p2p::Address& Message::_internal_address() const {
  return *address_;
}
inline const ::p2p::Address& Message::address() const {
  const ::p2p::Address* p = address_;
  // @@protoc_insertion_point(field_get:p2p.Message.address)
  return p != NULL ? *p : *reinterpret_cast<const ::p2p::Address*>(
      &::p2p::_Address_default_instance_);
}
inline ::p2p::Address* Message::release_address() {
  // @@protoc_insertion_point(field_release:p2p.Message.address)
  clear_has_address();
  ::p2p::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline ::p2p::Address* Message::mutable_address() {
  set_has_address();
  if (address_ == NULL) {
    auto* p = CreateMaybeMessage<::p2p::Address>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:p2p.Message.address)
  return address_;
}
inline void Message::set_allocated_address(::p2p::Address* address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete address_;
  }
  if (address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    set_has_address();
  } else {
    clear_has_address();
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:p2p.Message.address)
}

// optional string version = 3 [default = "0.1.0"];
inline bool Message::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_version() {
  version_.ClearToDefaultNoArena(&::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get());
  clear_has_version();
}
inline const ::std::string& Message::version() const {
  // @@protoc_insertion_point(field_get:p2p.Message.version)
  return version_.GetNoArena();
}
inline void Message::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get(), value);
  // @@protoc_insertion_point(field_set:p2p.Message.version)
}
#if LANG_CXX11
inline void Message::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.Message.version)
}
#endif
inline void Message::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.Message.version)
}
inline void Message::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.Message.version)
}
inline ::std::string* Message::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:p2p.Message.version)
  return version_.MutableNoArena(&::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get());
}
inline ::std::string* Message::release_version() {
  // @@protoc_insertion_point(field_release:p2p.Message.version)
  if (!has_version()) {
    return NULL;
  }
  clear_has_version();
  return version_.ReleaseNonDefaultNoArena(&::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get());
}
inline void Message::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get(), version);
  // @@protoc_insertion_point(field_set_allocated:p2p.Message.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace p2p

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::p2p::RPCAPI> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::p2p::RPCAPI>() {
  return ::p2p::RPCAPI_descriptor();
}
template <> struct is_proto_enum< ::p2p::StatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::p2p::StatusType>() {
  return ::p2p::StatusType_descriptor();
}
template <> struct is_proto_enum< ::p2p::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::p2p::MessageType>() {
  return ::p2p::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_peer_2dto_2dpeer_2eproto
