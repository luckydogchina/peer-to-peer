// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer-to-peer.proto

#include "peer-to-peer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_peer_2dto_2dpeer_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_peer_2dto_2dpeer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Address;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_peer_2dto_2dpeer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConnectRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_peer_2dto_2dpeer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConnectRespond;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_peer_2dto_2dpeer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetUsersOnlineRespond;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_peer_2dto_2dpeer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HelloRespond;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_peer_2dto_2dpeer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NotifyRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_peer_2dto_2dpeer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NotifyRespond;
}  // namespace protobuf_peer_2dto_2dpeer_2eproto
namespace p2p {
class ConnectRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectRequest>
      _instance;
} _ConnectRequest_default_instance_;
class ConnectRespondDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectRespond>
      _instance;
} _ConnectRespond_default_instance_;
class GetUsersOnlineRespondDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetUsersOnlineRespond>
      _instance;
} _GetUsersOnlineRespond_default_instance_;
class NotifyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyRequest>
      _instance;
} _NotifyRequest_default_instance_;
class NotifyRespondDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyRespond>
      _instance;
} _NotifyRespond_default_instance_;
class HelloRespondDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HelloRespond>
      _instance;
} _HelloRespond_default_instance_;
class PacketRequstDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PacketRequst>
      _instance;
} _PacketRequst_default_instance_;
class PacketRespondDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PacketRespond>
      _instance;
} _PacketRespond_default_instance_;
class AddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Address>
      _instance;
} _Address_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message>
      _instance;
} _Message_default_instance_;
}  // namespace p2p
namespace protobuf_peer_2dto_2dpeer_2eproto {
static void InitDefaultsConnectRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p2p::_ConnectRequest_default_instance_;
    new (ptr) ::p2p::ConnectRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p2p::ConnectRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConnectRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConnectRequest}, {}};

static void InitDefaultsConnectRespond() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p2p::_ConnectRespond_default_instance_;
    new (ptr) ::p2p::ConnectRespond();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p2p::ConnectRespond::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConnectRespond =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConnectRespond}, {}};

static void InitDefaultsGetUsersOnlineRespond() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p2p::_GetUsersOnlineRespond_default_instance_;
    new (ptr) ::p2p::GetUsersOnlineRespond();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p2p::GetUsersOnlineRespond::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetUsersOnlineRespond =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetUsersOnlineRespond}, {}};

static void InitDefaultsNotifyRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p2p::_NotifyRequest_default_instance_;
    new (ptr) ::p2p::NotifyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p2p::NotifyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NotifyRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNotifyRequest}, {}};

static void InitDefaultsNotifyRespond() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p2p::_NotifyRespond_default_instance_;
    new (ptr) ::p2p::NotifyRespond();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p2p::NotifyRespond::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NotifyRespond =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNotifyRespond}, {}};

static void InitDefaultsHelloRespond() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p2p::_HelloRespond_default_instance_;
    new (ptr) ::p2p::HelloRespond();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p2p::HelloRespond::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HelloRespond =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHelloRespond}, {}};

static void InitDefaultsPacketRequst() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.DefaultConstruct();
  *::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get_mutable() = ::std::string("0.1.0", 5);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get_mutable());
  {
    void* ptr = &::p2p::_PacketRequst_default_instance_;
    new (ptr) ::p2p::PacketRequst();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p2p::PacketRequst::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PacketRequst =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPacketRequst}, {
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_ConnectRequest.base,
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_NotifyRequest.base,}};

static void InitDefaultsPacketRespond() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.DefaultConstruct();
  *::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get_mutable() = ::std::string("0.1.0", 5);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get_mutable());
  {
    void* ptr = &::p2p::_PacketRespond_default_instance_;
    new (ptr) ::p2p::PacketRespond();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p2p::PacketRespond::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_PacketRespond =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsPacketRespond}, {
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_ConnectRespond.base,
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_GetUsersOnlineRespond.base,
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_NotifyRespond.base,
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_HelloRespond.base,}};

static void InitDefaultsAddress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::p2p::_Address_default_instance_;
    new (ptr) ::p2p::Address();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p2p::Address::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Address =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddress}, {}};

static void InitDefaultsMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::p2p::Message::_i_give_permission_to_break_this_code_default_version_.DefaultConstruct();
  *::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get_mutable() = ::std::string("0.1.0", 5);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get_mutable());
  {
    void* ptr = &::p2p::_Message_default_instance_;
    new (ptr) ::p2p::Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::p2p::Message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Message =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMessage}, {
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_Address.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConnectRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConnectRespond.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetUsersOnlineRespond.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyRespond.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HelloRespond.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PacketRequst.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PacketRespond.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Address.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Message.base);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::ConnectRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::ConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::ConnectRequest, peeridentity_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::ConnectRespond, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::ConnectRespond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::ConnectRespond, statustype_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::GetUsersOnlineRespond, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::GetUsersOnlineRespond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::GetUsersOnlineRespond, usersonline_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::NotifyRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::NotifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::NotifyRequest, peeridentity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::NotifyRequest, payload_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::NotifyRespond, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::NotifyRespond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::NotifyRespond, statustype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::NotifyRespond, payload_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::HelloRespond, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::HelloRespond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::HelloRespond, statustype_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::PacketRequst, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::PacketRequst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::PacketRequst, rpcapi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::PacketRequst, peeridentity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::PacketRequst, connectrequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::PacketRequst, notifyrequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::PacketRequst, version_),
  4,
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::PacketRespond, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::PacketRespond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::PacketRespond, rpcapi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::PacketRespond, connectrespond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::PacketRespond, getusersonlinerespond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::PacketRespond, notifyrespond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::PacketRespond, hellorespond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::PacketRespond, version_),
  5,
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::Address, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::Address, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::Address, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::Address, port_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::Message, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::Message, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::Message, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::p2p::Message, version_),
  2,
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::p2p::ConnectRequest)},
  { 7, 13, sizeof(::p2p::ConnectRespond)},
  { 14, 20, sizeof(::p2p::GetUsersOnlineRespond)},
  { 21, 28, sizeof(::p2p::NotifyRequest)},
  { 30, 37, sizeof(::p2p::NotifyRespond)},
  { 39, 45, sizeof(::p2p::HelloRespond)},
  { 46, 56, sizeof(::p2p::PacketRequst)},
  { 61, 72, sizeof(::p2p::PacketRespond)},
  { 78, 86, sizeof(::p2p::Address)},
  { 89, 97, sizeof(::p2p::Message)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::p2p::_ConnectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::p2p::_ConnectRespond_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::p2p::_GetUsersOnlineRespond_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::p2p::_NotifyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::p2p::_NotifyRespond_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::p2p::_HelloRespond_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::p2p::_PacketRequst_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::p2p::_PacketRespond_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::p2p::_Address_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::p2p::_Message_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "peer-to-peer.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022peer-to-peer.proto\022\003p2p\"&\n\016ConnectRequ"
      "est\022\024\n\014peerIdentity\030\001 \002(\t\">\n\016ConnectResp"
      "ond\022,\n\nstatusType\030\001 \002(\0162\017.p2p.StatusType"
      ":\007SUCCESS\",\n\025GetUsersOnlineRespond\022\023\n\013us"
      "ersOnline\030\001 \003(\t\"6\n\rNotifyRequest\022\024\n\014peer"
      "Identity\030\001 \002(\t\022\017\n\007payload\030\002 \001(\014\"N\n\rNotif"
      "yRespond\022,\n\nstatusType\030\001 \002(\0162\017.p2p.Statu"
      "sType:\007SUCCESS\022\017\n\007payload\030\002 \001(\014\"<\n\014Hello"
      "Respond\022,\n\nstatusType\030\001 \002(\0162\017.p2p.Status"
      "Type:\007SUCCESS\"\261\001\n\014PacketRequst\022\033\n\006rpcApi"
      "\030\001 \002(\0162\013.p2p.RPCAPI\022\024\n\014peerIdentity\030\002 \002("
      "\t\022+\n\016connectRequest\030\003 \001(\0132\023.p2p.ConnectR"
      "equest\022)\n\rnotifyRequest\030\004 \001(\0132\022.p2p.Noti"
      "fyRequest\022\026\n\007version\030\005 \001(\t:\0050.1.0\"\200\002\n\rPa"
      "cketRespond\022\033\n\006rpcApi\030\001 \002(\0162\013.p2p.RPCAPI"
      "\022+\n\016connectRespond\030\002 \001(\0132\023.p2p.ConnectRe"
      "spond\0229\n\025getUsersOnlineRespond\030\003 \001(\0132\032.p"
      "2p.GetUsersOnlineRespond\022)\n\rnotifyRespon"
      "d\030\004 \001(\0132\022.p2p.NotifyRespond\022\'\n\014helloResp"
      "ond\030\005 \001(\0132\021.p2p.HelloRespond\022\026\n\007version\030"
      "\006 \001(\t:\0050.1.0\"4\n\007Address\022\n\n\002id\030\004 \002(\t\022\017\n\007a"
      "ddress\030\002 \002(\t\022\014\n\004port\030\003 \002(\005\"f\n\007Message\022$\n"
      "\001t\030\001 \002(\0162\020.p2p.MessageType:\007ADDRESS\022\035\n\007a"
      "ddress\030\002 \001(\0132\014.p2p.Address\022\026\n\007version\030\003 "
      "\001(\t:\0050.1.0*V\n\006RPCAPI\022\022\n\016GETUSERSONLINE\020\001"
      "\022\013\n\007CONNECT\020\002\022\010\n\004INFO\020\003\022\013\n\007OFFLINE\020\004\022\t\n\005"
      "HEART\020\005\022\t\n\005HELLO\020\006*a\n\nStatusType\022\013\n\007SUCC"
      "ESS\020\001\022\013\n\007FAILURE\020\002\022\t\n\005READY\020\003\022\t\n\005CLOSE\020\004"
      "\022\013\n\007RUNNING\020\005\022\013\n\007NOEXIST\020\006\022\t\n\005EXIST\020\007*\032\n"
      "\013MessageType\022\013\n\007ADDRESS\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "peer-to-peer.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_peer_2dto_2dpeer_2eproto
namespace p2p {
const ::google::protobuf::EnumDescriptor* RPCAPI_descriptor() {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_enum_descriptors[0];
}
bool RPCAPI_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusType_descriptor() {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_enum_descriptors[1];
}
bool StatusType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_enum_descriptors[2];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ConnectRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectRequest::kPeerIdentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectRequest::ConnectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_ConnectRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.ConnectRequest)
}
ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peeridentity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peeridentity()) {
    peeridentity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peeridentity_);
  }
  // @@protoc_insertion_point(copy_constructor:p2p.ConnectRequest)
}

void ConnectRequest::SharedCtor() {
  peeridentity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ConnectRequest::~ConnectRequest() {
  // @@protoc_insertion_point(destructor:p2p.ConnectRequest)
  SharedDtor();
}

void ConnectRequest::SharedDtor() {
  peeridentity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConnectRequest::descriptor() {
  ::protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectRequest& ConnectRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_peer_2dto_2dpeer_2eproto::scc_info_ConnectRequest.base);
  return *internal_default_instance();
}


void ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.ConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    peeridentity_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.ConnectRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string peerIdentity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peeridentity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peeridentity().data(), static_cast<int>(this->peeridentity().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.ConnectRequest.peerIdentity");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.ConnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.ConnectRequest)
  return false;
#undef DO_
}

void ConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.ConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string peerIdentity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peeridentity().data(), static_cast<int>(this->peeridentity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.ConnectRequest.peerIdentity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->peeridentity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.ConnectRequest)
}

::google::protobuf::uint8* ConnectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p2p.ConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string peerIdentity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peeridentity().data(), static_cast<int>(this->peeridentity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.ConnectRequest.peerIdentity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->peeridentity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.ConnectRequest)
  return target;
}

size_t ConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.ConnectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string peerIdentity = 1;
  if (has_peeridentity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peeridentity());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.ConnectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.ConnectRequest)
    MergeFrom(*source);
  }
}

void ConnectRequest::MergeFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peeridentity()) {
    set_has_peeridentity();
    peeridentity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peeridentity_);
  }
}

void ConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ConnectRequest::Swap(ConnectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectRequest::InternalSwap(ConnectRequest* other) {
  using std::swap;
  peeridentity_.Swap(&other->peeridentity_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConnectRequest::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConnectRespond::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectRespond::kStatusTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectRespond::ConnectRespond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_ConnectRespond.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.ConnectRespond)
}
ConnectRespond::ConnectRespond(const ConnectRespond& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  statustype_ = from.statustype_;
  // @@protoc_insertion_point(copy_constructor:p2p.ConnectRespond)
}

void ConnectRespond::SharedCtor() {
  statustype_ = 1;
}

ConnectRespond::~ConnectRespond() {
  // @@protoc_insertion_point(destructor:p2p.ConnectRespond)
  SharedDtor();
}

void ConnectRespond::SharedDtor() {
}

void ConnectRespond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConnectRespond::descriptor() {
  ::protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectRespond& ConnectRespond::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_peer_2dto_2dpeer_2eproto::scc_info_ConnectRespond.base);
  return *internal_default_instance();
}


void ConnectRespond::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.ConnectRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statustype_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConnectRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.ConnectRespond)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .p2p.StatusType statusType = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::p2p::StatusType_IsValid(value)) {
            set_statustype(static_cast< ::p2p::StatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.ConnectRespond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.ConnectRespond)
  return false;
#undef DO_
}

void ConnectRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.ConnectRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.StatusType statusType = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->statustype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.ConnectRespond)
}

::google::protobuf::uint8* ConnectRespond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p2p.ConnectRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.StatusType statusType = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->statustype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.ConnectRespond)
  return target;
}

size_t ConnectRespond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.ConnectRespond)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .p2p.StatusType statusType = 1 [default = SUCCESS];
  if (has_statustype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->statustype());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectRespond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.ConnectRespond)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectRespond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectRespond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.ConnectRespond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.ConnectRespond)
    MergeFrom(*source);
  }
}

void ConnectRespond::MergeFrom(const ConnectRespond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.ConnectRespond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statustype()) {
    set_statustype(from.statustype());
  }
}

void ConnectRespond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.ConnectRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRespond::CopyFrom(const ConnectRespond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.ConnectRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRespond::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ConnectRespond::Swap(ConnectRespond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectRespond::InternalSwap(ConnectRespond* other) {
  using std::swap;
  swap(statustype_, other->statustype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConnectRespond::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetUsersOnlineRespond::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUsersOnlineRespond::kUsersOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUsersOnlineRespond::GetUsersOnlineRespond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_GetUsersOnlineRespond.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.GetUsersOnlineRespond)
}
GetUsersOnlineRespond::GetUsersOnlineRespond(const GetUsersOnlineRespond& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      usersonline_(from.usersonline_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p2p.GetUsersOnlineRespond)
}

void GetUsersOnlineRespond::SharedCtor() {
}

GetUsersOnlineRespond::~GetUsersOnlineRespond() {
  // @@protoc_insertion_point(destructor:p2p.GetUsersOnlineRespond)
  SharedDtor();
}

void GetUsersOnlineRespond::SharedDtor() {
}

void GetUsersOnlineRespond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetUsersOnlineRespond::descriptor() {
  ::protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetUsersOnlineRespond& GetUsersOnlineRespond::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_peer_2dto_2dpeer_2eproto::scc_info_GetUsersOnlineRespond.base);
  return *internal_default_instance();
}


void GetUsersOnlineRespond::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.GetUsersOnlineRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usersonline_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetUsersOnlineRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.GetUsersOnlineRespond)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string usersOnline = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_usersonline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->usersonline(this->usersonline_size() - 1).data(),
            static_cast<int>(this->usersonline(this->usersonline_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.GetUsersOnlineRespond.usersOnline");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.GetUsersOnlineRespond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.GetUsersOnlineRespond)
  return false;
#undef DO_
}

void GetUsersOnlineRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.GetUsersOnlineRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string usersOnline = 1;
  for (int i = 0, n = this->usersonline_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usersonline(i).data(), static_cast<int>(this->usersonline(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.GetUsersOnlineRespond.usersOnline");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->usersonline(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.GetUsersOnlineRespond)
}

::google::protobuf::uint8* GetUsersOnlineRespond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p2p.GetUsersOnlineRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string usersOnline = 1;
  for (int i = 0, n = this->usersonline_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usersonline(i).data(), static_cast<int>(this->usersonline(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.GetUsersOnlineRespond.usersOnline");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->usersonline(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.GetUsersOnlineRespond)
  return target;
}

size_t GetUsersOnlineRespond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.GetUsersOnlineRespond)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string usersOnline = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->usersonline_size());
  for (int i = 0, n = this->usersonline_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->usersonline(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUsersOnlineRespond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.GetUsersOnlineRespond)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUsersOnlineRespond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUsersOnlineRespond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.GetUsersOnlineRespond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.GetUsersOnlineRespond)
    MergeFrom(*source);
  }
}

void GetUsersOnlineRespond::MergeFrom(const GetUsersOnlineRespond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.GetUsersOnlineRespond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usersonline_.MergeFrom(from.usersonline_);
}

void GetUsersOnlineRespond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.GetUsersOnlineRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUsersOnlineRespond::CopyFrom(const GetUsersOnlineRespond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.GetUsersOnlineRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUsersOnlineRespond::IsInitialized() const {
  return true;
}

void GetUsersOnlineRespond::Swap(GetUsersOnlineRespond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUsersOnlineRespond::InternalSwap(GetUsersOnlineRespond* other) {
  using std::swap;
  usersonline_.InternalSwap(CastToBase(&other->usersonline_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetUsersOnlineRespond::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotifyRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyRequest::kPeerIdentityFieldNumber;
const int NotifyRequest::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyRequest::NotifyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_NotifyRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.NotifyRequest)
}
NotifyRequest::NotifyRequest(const NotifyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peeridentity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peeridentity()) {
    peeridentity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peeridentity_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  // @@protoc_insertion_point(copy_constructor:p2p.NotifyRequest)
}

void NotifyRequest::SharedCtor() {
  peeridentity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NotifyRequest::~NotifyRequest() {
  // @@protoc_insertion_point(destructor:p2p.NotifyRequest)
  SharedDtor();
}

void NotifyRequest::SharedDtor() {
  peeridentity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NotifyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NotifyRequest::descriptor() {
  ::protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotifyRequest& NotifyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_peer_2dto_2dpeer_2eproto::scc_info_NotifyRequest.base);
  return *internal_default_instance();
}


void NotifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.NotifyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      peeridentity_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      payload_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NotifyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.NotifyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string peerIdentity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peeridentity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peeridentity().data(), static_cast<int>(this->peeridentity().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.NotifyRequest.peerIdentity");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.NotifyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.NotifyRequest)
  return false;
#undef DO_
}

void NotifyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.NotifyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string peerIdentity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peeridentity().data(), static_cast<int>(this->peeridentity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.NotifyRequest.peerIdentity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->peeridentity(), output);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.NotifyRequest)
}

::google::protobuf::uint8* NotifyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p2p.NotifyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string peerIdentity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peeridentity().data(), static_cast<int>(this->peeridentity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.NotifyRequest.peerIdentity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->peeridentity(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.NotifyRequest)
  return target;
}

size_t NotifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.NotifyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string peerIdentity = 1;
  if (has_peeridentity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peeridentity());
  }
  // optional bytes payload = 2;
  if (has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.NotifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.NotifyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.NotifyRequest)
    MergeFrom(*source);
  }
}

void NotifyRequest::MergeFrom(const NotifyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.NotifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_peeridentity();
      peeridentity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peeridentity_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
  }
}

void NotifyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.NotifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRequest::CopyFrom(const NotifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.NotifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void NotifyRequest::Swap(NotifyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyRequest::InternalSwap(NotifyRequest* other) {
  using std::swap;
  peeridentity_.Swap(&other->peeridentity_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotifyRequest::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotifyRespond::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyRespond::kStatusTypeFieldNumber;
const int NotifyRespond::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyRespond::NotifyRespond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_NotifyRespond.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.NotifyRespond)
}
NotifyRespond::NotifyRespond(const NotifyRespond& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  statustype_ = from.statustype_;
  // @@protoc_insertion_point(copy_constructor:p2p.NotifyRespond)
}

void NotifyRespond::SharedCtor() {
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statustype_ = 1;
}

NotifyRespond::~NotifyRespond() {
  // @@protoc_insertion_point(destructor:p2p.NotifyRespond)
  SharedDtor();
}

void NotifyRespond::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NotifyRespond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NotifyRespond::descriptor() {
  ::protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotifyRespond& NotifyRespond::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_peer_2dto_2dpeer_2eproto::scc_info_NotifyRespond.base);
  return *internal_default_instance();
}


void NotifyRespond::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.NotifyRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      payload_.ClearNonDefaultToEmptyNoArena();
    }
    statustype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NotifyRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.NotifyRespond)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .p2p.StatusType statusType = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::p2p::StatusType_IsValid(value)) {
            set_statustype(static_cast< ::p2p::StatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.NotifyRespond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.NotifyRespond)
  return false;
#undef DO_
}

void NotifyRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.NotifyRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.StatusType statusType = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->statustype(), output);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.NotifyRespond)
}

::google::protobuf::uint8* NotifyRespond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p2p.NotifyRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.StatusType statusType = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->statustype(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.NotifyRespond)
  return target;
}

size_t NotifyRespond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.NotifyRespond)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .p2p.StatusType statusType = 1 [default = SUCCESS];
  if (has_statustype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->statustype());
  }
  // optional bytes payload = 2;
  if (has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyRespond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.NotifyRespond)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyRespond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyRespond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.NotifyRespond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.NotifyRespond)
    MergeFrom(*source);
  }
}

void NotifyRespond::MergeFrom(const NotifyRespond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.NotifyRespond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      statustype_ = from.statustype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NotifyRespond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.NotifyRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRespond::CopyFrom(const NotifyRespond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.NotifyRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRespond::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void NotifyRespond::Swap(NotifyRespond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyRespond::InternalSwap(NotifyRespond* other) {
  using std::swap;
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(statustype_, other->statustype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotifyRespond::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HelloRespond::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HelloRespond::kStatusTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HelloRespond::HelloRespond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_HelloRespond.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.HelloRespond)
}
HelloRespond::HelloRespond(const HelloRespond& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  statustype_ = from.statustype_;
  // @@protoc_insertion_point(copy_constructor:p2p.HelloRespond)
}

void HelloRespond::SharedCtor() {
  statustype_ = 1;
}

HelloRespond::~HelloRespond() {
  // @@protoc_insertion_point(destructor:p2p.HelloRespond)
  SharedDtor();
}

void HelloRespond::SharedDtor() {
}

void HelloRespond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HelloRespond::descriptor() {
  ::protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HelloRespond& HelloRespond::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_peer_2dto_2dpeer_2eproto::scc_info_HelloRespond.base);
  return *internal_default_instance();
}


void HelloRespond::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.HelloRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statustype_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HelloRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.HelloRespond)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .p2p.StatusType statusType = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::p2p::StatusType_IsValid(value)) {
            set_statustype(static_cast< ::p2p::StatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.HelloRespond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.HelloRespond)
  return false;
#undef DO_
}

void HelloRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.HelloRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.StatusType statusType = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->statustype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.HelloRespond)
}

::google::protobuf::uint8* HelloRespond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p2p.HelloRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.StatusType statusType = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->statustype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.HelloRespond)
  return target;
}

size_t HelloRespond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.HelloRespond)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .p2p.StatusType statusType = 1 [default = SUCCESS];
  if (has_statustype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->statustype());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelloRespond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.HelloRespond)
  GOOGLE_DCHECK_NE(&from, this);
  const HelloRespond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HelloRespond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.HelloRespond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.HelloRespond)
    MergeFrom(*source);
  }
}

void HelloRespond::MergeFrom(const HelloRespond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.HelloRespond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statustype()) {
    set_statustype(from.statustype());
  }
}

void HelloRespond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.HelloRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloRespond::CopyFrom(const HelloRespond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.HelloRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloRespond::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void HelloRespond::Swap(HelloRespond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HelloRespond::InternalSwap(HelloRespond* other) {
  using std::swap;
  swap(statustype_, other->statustype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HelloRespond::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PacketRequst::InitAsDefaultInstance() {
  ::p2p::_PacketRequst_default_instance_._instance.get_mutable()->connectrequest_ = const_cast< ::p2p::ConnectRequest*>(
      ::p2p::ConnectRequest::internal_default_instance());
  ::p2p::_PacketRequst_default_instance_._instance.get_mutable()->notifyrequest_ = const_cast< ::p2p::NotifyRequest*>(
      ::p2p::NotifyRequest::internal_default_instance());
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PacketRequst::_i_give_permission_to_break_this_code_default_version_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketRequst::kRpcApiFieldNumber;
const int PacketRequst::kPeerIdentityFieldNumber;
const int PacketRequst::kConnectRequestFieldNumber;
const int PacketRequst::kNotifyRequestFieldNumber;
const int PacketRequst::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketRequst::PacketRequst()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_PacketRequst.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.PacketRequst)
}
PacketRequst::PacketRequst(const PacketRequst& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peeridentity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peeridentity()) {
    peeridentity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peeridentity_);
  }
  version_.UnsafeSetDefault(&::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get());
  if (from.has_version()) {
    version_.AssignWithDefault(&::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get(), from.version_);
  }
  if (from.has_connectrequest()) {
    connectrequest_ = new ::p2p::ConnectRequest(*from.connectrequest_);
  } else {
    connectrequest_ = NULL;
  }
  if (from.has_notifyrequest()) {
    notifyrequest_ = new ::p2p::NotifyRequest(*from.notifyrequest_);
  } else {
    notifyrequest_ = NULL;
  }
  rpcapi_ = from.rpcapi_;
  // @@protoc_insertion_point(copy_constructor:p2p.PacketRequst)
}

void PacketRequst::SharedCtor() {
  peeridentity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get());
  ::memset(&connectrequest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&notifyrequest_) -
      reinterpret_cast<char*>(&connectrequest_)) + sizeof(notifyrequest_));
  rpcapi_ = 1;
}

PacketRequst::~PacketRequst() {
  // @@protoc_insertion_point(destructor:p2p.PacketRequst)
  SharedDtor();
}

void PacketRequst::SharedDtor() {
  peeridentity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get());
  if (this != internal_default_instance()) delete connectrequest_;
  if (this != internal_default_instance()) delete notifyrequest_;
}

void PacketRequst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PacketRequst::descriptor() {
  ::protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PacketRequst& PacketRequst::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_peer_2dto_2dpeer_2eproto::scc_info_PacketRequst.base);
  return *internal_default_instance();
}


void PacketRequst::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.PacketRequst)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      peeridentity_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.UnsafeMutablePointer()->assign(*&::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get());
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(connectrequest_ != NULL);
      connectrequest_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(notifyrequest_ != NULL);
      notifyrequest_->Clear();
    }
    rpcapi_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PacketRequst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.PacketRequst)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .p2p.RPCAPI rpcApi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::p2p::RPCAPI_IsValid(value)) {
            set_rpcapi(static_cast< ::p2p::RPCAPI >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string peerIdentity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peeridentity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peeridentity().data(), static_cast<int>(this->peeridentity().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.PacketRequst.peerIdentity");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .p2p.ConnectRequest connectRequest = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connectrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .p2p.NotifyRequest notifyRequest = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_notifyrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 5 [default = "0.1.0"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.PacketRequst.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.PacketRequst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.PacketRequst)
  return false;
#undef DO_
}

void PacketRequst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.PacketRequst)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.RPCAPI rpcApi = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rpcapi(), output);
  }

  // required string peerIdentity = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peeridentity().data(), static_cast<int>(this->peeridentity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.PacketRequst.peerIdentity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->peeridentity(), output);
  }

  // optional .p2p.ConnectRequest connectRequest = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_connectrequest(), output);
  }

  // optional .p2p.NotifyRequest notifyRequest = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_notifyrequest(), output);
  }

  // optional string version = 5 [default = "0.1.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.PacketRequst.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.PacketRequst)
}

::google::protobuf::uint8* PacketRequst::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p2p.PacketRequst)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.RPCAPI rpcApi = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rpcapi(), target);
  }

  // required string peerIdentity = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peeridentity().data(), static_cast<int>(this->peeridentity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.PacketRequst.peerIdentity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->peeridentity(), target);
  }

  // optional .p2p.ConnectRequest connectRequest = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_connectrequest(), deterministic, target);
  }

  // optional .p2p.NotifyRequest notifyRequest = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_notifyrequest(), deterministic, target);
  }

  // optional string version = 5 [default = "0.1.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.PacketRequst.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.PacketRequst)
  return target;
}

size_t PacketRequst::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:p2p.PacketRequst)
  size_t total_size = 0;

  if (has_peeridentity()) {
    // required string peerIdentity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peeridentity());
  }

  if (has_rpcapi()) {
    // required .p2p.RPCAPI rpcApi = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rpcapi());
  }

  return total_size;
}
size_t PacketRequst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.PacketRequst)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required string peerIdentity = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peeridentity());

    // required .p2p.RPCAPI rpcApi = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rpcapi());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional string version = 5 [default = "0.1.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .p2p.ConnectRequest connectRequest = 3;
    if (has_connectrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *connectrequest_);
    }

    // optional .p2p.NotifyRequest notifyRequest = 4;
    if (has_notifyrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *notifyrequest_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketRequst::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.PacketRequst)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketRequst* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketRequst>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.PacketRequst)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.PacketRequst)
    MergeFrom(*source);
  }
}

void PacketRequst::MergeFrom(const PacketRequst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.PacketRequst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_peeridentity();
      peeridentity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peeridentity_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version();
      version_.AssignWithDefault(&::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_connectrequest()->::p2p::ConnectRequest::MergeFrom(from.connectrequest());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_notifyrequest()->::p2p::NotifyRequest::MergeFrom(from.notifyrequest());
    }
    if (cached_has_bits & 0x00000010u) {
      rpcapi_ = from.rpcapi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PacketRequst::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.PacketRequst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketRequst::CopyFrom(const PacketRequst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.PacketRequst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketRequst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;
  if (has_connectrequest()) {
    if (!this->connectrequest_->IsInitialized()) return false;
  }
  if (has_notifyrequest()) {
    if (!this->notifyrequest_->IsInitialized()) return false;
  }
  return true;
}

void PacketRequst::Swap(PacketRequst* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketRequst::InternalSwap(PacketRequst* other) {
  using std::swap;
  peeridentity_.Swap(&other->peeridentity_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::p2p::PacketRequst::_i_give_permission_to_break_this_code_default_version_.get(),
    GetArenaNoVirtual());
  swap(connectrequest_, other->connectrequest_);
  swap(notifyrequest_, other->notifyrequest_);
  swap(rpcapi_, other->rpcapi_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PacketRequst::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PacketRespond::InitAsDefaultInstance() {
  ::p2p::_PacketRespond_default_instance_._instance.get_mutable()->connectrespond_ = const_cast< ::p2p::ConnectRespond*>(
      ::p2p::ConnectRespond::internal_default_instance());
  ::p2p::_PacketRespond_default_instance_._instance.get_mutable()->getusersonlinerespond_ = const_cast< ::p2p::GetUsersOnlineRespond*>(
      ::p2p::GetUsersOnlineRespond::internal_default_instance());
  ::p2p::_PacketRespond_default_instance_._instance.get_mutable()->notifyrespond_ = const_cast< ::p2p::NotifyRespond*>(
      ::p2p::NotifyRespond::internal_default_instance());
  ::p2p::_PacketRespond_default_instance_._instance.get_mutable()->hellorespond_ = const_cast< ::p2p::HelloRespond*>(
      ::p2p::HelloRespond::internal_default_instance());
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PacketRespond::_i_give_permission_to_break_this_code_default_version_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketRespond::kRpcApiFieldNumber;
const int PacketRespond::kConnectRespondFieldNumber;
const int PacketRespond::kGetUsersOnlineRespondFieldNumber;
const int PacketRespond::kNotifyRespondFieldNumber;
const int PacketRespond::kHelloRespondFieldNumber;
const int PacketRespond::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketRespond::PacketRespond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_PacketRespond.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.PacketRespond)
}
PacketRespond::PacketRespond(const PacketRespond& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get());
  if (from.has_version()) {
    version_.AssignWithDefault(&::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get(), from.version_);
  }
  if (from.has_connectrespond()) {
    connectrespond_ = new ::p2p::ConnectRespond(*from.connectrespond_);
  } else {
    connectrespond_ = NULL;
  }
  if (from.has_getusersonlinerespond()) {
    getusersonlinerespond_ = new ::p2p::GetUsersOnlineRespond(*from.getusersonlinerespond_);
  } else {
    getusersonlinerespond_ = NULL;
  }
  if (from.has_notifyrespond()) {
    notifyrespond_ = new ::p2p::NotifyRespond(*from.notifyrespond_);
  } else {
    notifyrespond_ = NULL;
  }
  if (from.has_hellorespond()) {
    hellorespond_ = new ::p2p::HelloRespond(*from.hellorespond_);
  } else {
    hellorespond_ = NULL;
  }
  rpcapi_ = from.rpcapi_;
  // @@protoc_insertion_point(copy_constructor:p2p.PacketRespond)
}

void PacketRespond::SharedCtor() {
  version_.UnsafeSetDefault(&::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get());
  ::memset(&connectrespond_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hellorespond_) -
      reinterpret_cast<char*>(&connectrespond_)) + sizeof(hellorespond_));
  rpcapi_ = 1;
}

PacketRespond::~PacketRespond() {
  // @@protoc_insertion_point(destructor:p2p.PacketRespond)
  SharedDtor();
}

void PacketRespond::SharedDtor() {
  version_.DestroyNoArena(&::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get());
  if (this != internal_default_instance()) delete connectrespond_;
  if (this != internal_default_instance()) delete getusersonlinerespond_;
  if (this != internal_default_instance()) delete notifyrespond_;
  if (this != internal_default_instance()) delete hellorespond_;
}

void PacketRespond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PacketRespond::descriptor() {
  ::protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PacketRespond& PacketRespond::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_peer_2dto_2dpeer_2eproto::scc_info_PacketRespond.base);
  return *internal_default_instance();
}


void PacketRespond::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.PacketRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      version_.UnsafeMutablePointer()->assign(*&::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(connectrespond_ != NULL);
      connectrespond_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(getusersonlinerespond_ != NULL);
      getusersonlinerespond_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(notifyrespond_ != NULL);
      notifyrespond_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(hellorespond_ != NULL);
      hellorespond_->Clear();
    }
    rpcapi_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PacketRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.PacketRespond)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .p2p.RPCAPI rpcApi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::p2p::RPCAPI_IsValid(value)) {
            set_rpcapi(static_cast< ::p2p::RPCAPI >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .p2p.ConnectRespond connectRespond = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connectrespond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .p2p.GetUsersOnlineRespond getUsersOnlineRespond = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getusersonlinerespond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .p2p.NotifyRespond notifyRespond = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_notifyrespond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .p2p.HelloRespond helloRespond = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hellorespond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 6 [default = "0.1.0"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.PacketRespond.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.PacketRespond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.PacketRespond)
  return false;
#undef DO_
}

void PacketRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.PacketRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.RPCAPI rpcApi = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rpcapi(), output);
  }

  // optional .p2p.ConnectRespond connectRespond = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_connectrespond(), output);
  }

  // optional .p2p.GetUsersOnlineRespond getUsersOnlineRespond = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_getusersonlinerespond(), output);
  }

  // optional .p2p.NotifyRespond notifyRespond = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_notifyrespond(), output);
  }

  // optional .p2p.HelloRespond helloRespond = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_hellorespond(), output);
  }

  // optional string version = 6 [default = "0.1.0"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.PacketRespond.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.PacketRespond)
}

::google::protobuf::uint8* PacketRespond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p2p.PacketRespond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.RPCAPI rpcApi = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rpcapi(), target);
  }

  // optional .p2p.ConnectRespond connectRespond = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_connectrespond(), deterministic, target);
  }

  // optional .p2p.GetUsersOnlineRespond getUsersOnlineRespond = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_getusersonlinerespond(), deterministic, target);
  }

  // optional .p2p.NotifyRespond notifyRespond = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_notifyrespond(), deterministic, target);
  }

  // optional .p2p.HelloRespond helloRespond = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_hellorespond(), deterministic, target);
  }

  // optional string version = 6 [default = "0.1.0"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.PacketRespond.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.PacketRespond)
  return target;
}

size_t PacketRespond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.PacketRespond)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .p2p.RPCAPI rpcApi = 1;
  if (has_rpcapi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rpcapi());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string version = 6 [default = "0.1.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .p2p.ConnectRespond connectRespond = 2;
    if (has_connectrespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *connectrespond_);
    }

    // optional .p2p.GetUsersOnlineRespond getUsersOnlineRespond = 3;
    if (has_getusersonlinerespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *getusersonlinerespond_);
    }

    // optional .p2p.NotifyRespond notifyRespond = 4;
    if (has_notifyrespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *notifyrespond_);
    }

    // optional .p2p.HelloRespond helloRespond = 5;
    if (has_hellorespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *hellorespond_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketRespond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.PacketRespond)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketRespond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketRespond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.PacketRespond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.PacketRespond)
    MergeFrom(*source);
  }
}

void PacketRespond::MergeFrom(const PacketRespond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.PacketRespond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_version();
      version_.AssignWithDefault(&::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get(), from.version_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_connectrespond()->::p2p::ConnectRespond::MergeFrom(from.connectrespond());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_getusersonlinerespond()->::p2p::GetUsersOnlineRespond::MergeFrom(from.getusersonlinerespond());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_notifyrespond()->::p2p::NotifyRespond::MergeFrom(from.notifyrespond());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_hellorespond()->::p2p::HelloRespond::MergeFrom(from.hellorespond());
    }
    if (cached_has_bits & 0x00000020u) {
      rpcapi_ = from.rpcapi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PacketRespond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.PacketRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketRespond::CopyFrom(const PacketRespond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.PacketRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketRespond::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  if (has_connectrespond()) {
    if (!this->connectrespond_->IsInitialized()) return false;
  }
  if (has_notifyrespond()) {
    if (!this->notifyrespond_->IsInitialized()) return false;
  }
  if (has_hellorespond()) {
    if (!this->hellorespond_->IsInitialized()) return false;
  }
  return true;
}

void PacketRespond::Swap(PacketRespond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketRespond::InternalSwap(PacketRespond* other) {
  using std::swap;
  version_.Swap(&other->version_, &::p2p::PacketRespond::_i_give_permission_to_break_this_code_default_version_.get(),
    GetArenaNoVirtual());
  swap(connectrespond_, other->connectrespond_);
  swap(getusersonlinerespond_, other->getusersonlinerespond_);
  swap(notifyrespond_, other->notifyrespond_);
  swap(hellorespond_, other->hellorespond_);
  swap(rpcapi_, other->rpcapi_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PacketRespond::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Address::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Address::kIdFieldNumber;
const int Address::kAddressFieldNumber;
const int Address::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Address::Address()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_Address.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.Address)
}
Address::Address(const Address& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:p2p.Address)
}

void Address::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:p2p.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  ::protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Address& Address::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_peer_2dto_2dpeer_2eproto::scc_info_Address.base);
  return *internal_default_instance();
}


void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.Address)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.Address.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.Address.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.Address)
  return false;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Address.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // required int32 port = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // required string id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Address.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.Address)
}

::google::protobuf::uint8* Address::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p2p.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Address.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // required int32 port = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // required string id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Address.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.Address)
  return target;
}

size_t Address::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:p2p.Address)
  size_t total_size = 0;

  if (has_address()) {
    // required string address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  if (has_id()) {
    // required string id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_port()) {
    // required int32 port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.Address)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());

    // required string id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required int32 port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Address>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.Address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Address::Swap(Address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Address::InternalSwap(Address* other) {
  using std::swap;
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message::InitAsDefaultInstance() {
  ::p2p::_Message_default_instance_._instance.get_mutable()->address_ = const_cast< ::p2p::Address*>(
      ::p2p::Address::internal_default_instance());
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> Message::_i_give_permission_to_break_this_code_default_version_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kTFieldNumber;
const int Message::kAddressFieldNumber;
const int Message::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_peer_2dto_2dpeer_2eproto::scc_info_Message.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get());
  if (from.has_version()) {
    version_.AssignWithDefault(&::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get(), from.version_);
  }
  if (from.has_address()) {
    address_ = new ::p2p::Address(*from.address_);
  } else {
    address_ = NULL;
  }
  t_ = from.t_;
  // @@protoc_insertion_point(copy_constructor:p2p.Message)
}

void Message::SharedCtor() {
  version_.UnsafeSetDefault(&::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get());
  address_ = NULL;
  t_ = 1;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:p2p.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  version_.DestroyNoArena(&::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get());
  if (this != internal_default_instance()) delete address_;
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  ::protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_peer_2dto_2dpeer_2eproto::scc_info_Message.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      version_.UnsafeMutablePointer()->assign(*&::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(address_ != NULL);
      address_->Clear();
    }
    t_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.Message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .p2p.MessageType t = 1 [default = ADDRESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::p2p::MessageType_IsValid(value)) {
            set_t(static_cast< ::p2p::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .p2p.Address address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 3 [default = "0.1.0"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.Message.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.MessageType t = 1 [default = ADDRESS];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->t(), output);
  }

  // optional .p2p.Address address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_address(), output);
  }

  // optional string version = 3 [default = "0.1.0"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Message.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p2p.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.MessageType t = 1 [default = ADDRESS];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->t(), target);
  }

  // optional .p2p.Address address = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_address(), deterministic, target);
  }

  // optional string version = 3 [default = "0.1.0"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Message.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .p2p.MessageType t = 1 [default = ADDRESS];
  if (has_t()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->t());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string version = 3 [default = "0.1.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .p2p.Address address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *address_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_version();
      version_.AssignWithDefault(&::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get(), from.version_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_address()->::p2p::Address::MergeFrom(from.address());
    }
    if (cached_has_bits & 0x00000004u) {
      t_ = from.t_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_address()) {
    if (!this->address_->IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  version_.Swap(&other->version_, &::p2p::Message::_i_give_permission_to_break_this_code_default_version_.get(),
    GetArenaNoVirtual());
  swap(address_, other->address_);
  swap(t_, other->t_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace p2p
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::p2p::ConnectRequest* Arena::CreateMaybeMessage< ::p2p::ConnectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::p2p::ConnectRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::p2p::ConnectRespond* Arena::CreateMaybeMessage< ::p2p::ConnectRespond >(Arena* arena) {
  return Arena::CreateInternal< ::p2p::ConnectRespond >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::p2p::GetUsersOnlineRespond* Arena::CreateMaybeMessage< ::p2p::GetUsersOnlineRespond >(Arena* arena) {
  return Arena::CreateInternal< ::p2p::GetUsersOnlineRespond >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::p2p::NotifyRequest* Arena::CreateMaybeMessage< ::p2p::NotifyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::p2p::NotifyRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::p2p::NotifyRespond* Arena::CreateMaybeMessage< ::p2p::NotifyRespond >(Arena* arena) {
  return Arena::CreateInternal< ::p2p::NotifyRespond >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::p2p::HelloRespond* Arena::CreateMaybeMessage< ::p2p::HelloRespond >(Arena* arena) {
  return Arena::CreateInternal< ::p2p::HelloRespond >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::p2p::PacketRequst* Arena::CreateMaybeMessage< ::p2p::PacketRequst >(Arena* arena) {
  return Arena::CreateInternal< ::p2p::PacketRequst >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::p2p::PacketRespond* Arena::CreateMaybeMessage< ::p2p::PacketRespond >(Arena* arena) {
  return Arena::CreateInternal< ::p2p::PacketRespond >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::p2p::Address* Arena::CreateMaybeMessage< ::p2p::Address >(Arena* arena) {
  return Arena::CreateInternal< ::p2p::Address >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::p2p::Message* Arena::CreateMaybeMessage< ::p2p::Message >(Arena* arena) {
  return Arena::CreateInternal< ::p2p::Message >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
