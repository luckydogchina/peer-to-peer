// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer-to-peer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "peer-to-peer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace p2p {
class AddressDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Address> {
} _Address_default_instance_;
class RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Request> {
} _Request_default_instance_;
class RespondDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Respond> {
} _Respond_default_instance_;
class CommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Command> {
} _Command_default_instance_;
class IndicationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Indication> {
} _Indication_default_instance_;
class TranscationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Transcation> {
} _Transcation_default_instance_;
class MsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Msg> {
} _Msg_default_instance_;

namespace protobuf_peer_2dto_2dpeer_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, adr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, id_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Respond, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Respond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Respond, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Respond, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Respond, result_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Indication, adr_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transcation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transcation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transcation, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transcation, msg_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, rqs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, rsp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, idt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, trs_),
  0,
  6,
  1,
  2,
  3,
  4,
  5,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(Address)},
  { 9, 17, sizeof(Request)},
  { 20, 28, sizeof(Respond)},
  { 31, 38, sizeof(Command)},
  { 40, 49, sizeof(Indication)},
  { 53, 60, sizeof(Transcation)},
  { 62, 74, sizeof(Msg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Address_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Respond_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Indication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transcation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Msg_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "peer-to-peer.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _Address_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Request_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Respond_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Command_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Indication_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Transcation_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Msg_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  Msg::_default_version_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Address_default_instance_.DefaultConstruct();
  _Request_default_instance_.DefaultConstruct();
  _Respond_default_instance_.DefaultConstruct();
  _Command_default_instance_.DefaultConstruct();
  _Indication_default_instance_.DefaultConstruct();
  _Transcation_default_instance_.DefaultConstruct();
  Msg::_default_version_.DefaultConstruct();
  *Msg::_default_version_.get_mutable() = ::std::string("0.1.0", 5);
  _Msg_default_instance_.DefaultConstruct();
  _Request_default_instance_.get_mutable()->adr_ = const_cast< ::p2p::Address*>(
      ::p2p::Address::internal_default_instance());
  _Indication_default_instance_.get_mutable()->adr_ = const_cast< ::p2p::Address*>(
      ::p2p::Address::internal_default_instance());
  _Msg_default_instance_.get_mutable()->rqs_ = const_cast< ::p2p::Request*>(
      ::p2p::Request::internal_default_instance());
  _Msg_default_instance_.get_mutable()->rsp_ = const_cast< ::p2p::Respond*>(
      ::p2p::Respond::internal_default_instance());
  _Msg_default_instance_.get_mutable()->cmd_ = const_cast< ::p2p::Command*>(
      ::p2p::Command::internal_default_instance());
  _Msg_default_instance_.get_mutable()->idt_ = const_cast< ::p2p::Indication*>(
      ::p2p::Indication::internal_default_instance());
  _Msg_default_instance_.get_mutable()->trs_ = const_cast< ::p2p::Transcation*>(
      ::p2p::Transcation::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022peer-to-peer.proto\022\003p2p\"#\n\007Address\022\n\n\002"
      "ip\030\001 \002(\t\022\014\n\004port\030\002 \002(\005\"Q\n\007Request\022\037\n\006act"
      "ion\030\001 \002(\0162\017.p2p.ActionType\022\031\n\003adr\030\003 \001(\0132"
      "\014.p2p.Address\022\n\n\002id\030\002 \001(\t\"`\n\007Respond\022\037\n\006"
      "action\030\001 \002(\0162\017.p2p.ActionType\022\n\n\002id\030\003 \003("
      "\t\022(\n\006result\030\004 \001(\0162\017.p2p.StatusType:\007SUCC"
      "ESS\"6\n\007Command\022\037\n\006action\030\001 \002(\0162\017.p2p.Act"
      "ionType\022\n\n\002id\030\002 \002(\t\"~\n\nIndication\022\037\n\006act"
      "ion\030\001 \002(\0162\017.p2p.ActionType\022(\n\006result\030\002 \002"
      "(\0162\017.p2p.StatusType:\007SUCCESS\022\n\n\002id\030\003 \001(\t"
      "\022\031\n\003adr\030\004 \001(\0132\014.p2p.Address\"\'\n\013Transcati"
      "on\022\013\n\003len\030\001 \002(\005\022\013\n\003msg\030\002 \002(\014\"\236\002\n\003Msg\022\026\n\007"
      "version\030\001 \002(\t:\0050.1.0\022\036\n\004type\030\002 \002(\0162\020.p2p"
      ".Msg.MsgType\022\031\n\003rqs\030\003 \001(\0132\014.p2p.Request\022"
      "\031\n\003rsp\030\004 \001(\0132\014.p2p.Respond\022\031\n\003cmd\030\005 \001(\0132"
      "\014.p2p.Command\022\034\n\003idt\030\006 \001(\0132\017.p2p.Indicat"
      "ion\022\035\n\003trs\030\007 \001(\0132\020.p2p.Transcation\"Q\n\007Ms"
      "gType\022\013\n\007REQUEST\020\001\022\013\n\007RESPOND\020\002\022\013\n\007COMMA"
      "ND\020\003\022\016\n\nINDICATION\020\004\022\017\n\013TRANSCATION\020\005*X\n"
      "\nActionType\022\016\n\nPEERONLINE\020\001\022\014\n\010CONNECTA\020"
      "\002\022\014\n\010CONNECTB\020\004\022\t\n\005HELLO\020\003\022\010\n\004HOLE\020\005\022\t\n\005"
      "HEART\020\006*I\n\nStatusType\022\013\n\007SUCCESS\020\001\022\013\n\007FA"
      "ILURE\020\002\022\t\n\005READY\020\003\022\t\n\005CLOSE\020\004\022\013\n\007RUNNING"
      "\020\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 922);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "peer-to-peer.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_peer_2dto_2dpeer_2eproto

const ::google::protobuf::EnumDescriptor* Msg_MsgType_descriptor() {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_enum_descriptors[0];
}
bool Msg_MsgType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Msg_MsgType Msg::REQUEST;
const Msg_MsgType Msg::RESPOND;
const Msg_MsgType Msg::COMMAND;
const Msg_MsgType Msg::INDICATION;
const Msg_MsgType Msg::TRANSCATION;
const Msg_MsgType Msg::MsgType_MIN;
const Msg_MsgType Msg::MsgType_MAX;
const int Msg::MsgType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ActionType_descriptor() {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_enum_descriptors[1];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusType_descriptor() {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_enum_descriptors[2];
}
bool StatusType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Address::kIpFieldNumber;
const int Address::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Address::Address()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_peer_2dto_2dpeer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.Address)
}
Address::Address(const Address& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:p2p.Address)
}

void Address::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:p2p.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Address& Address::default_instance() {
  protobuf_peer_2dto_2dpeer_2eproto::InitDefaults();
  return *internal_default_instance();
}

Address* Address::New(::google::protobuf::Arena* arena) const {
  Address* n = new Address;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.Address)
  if (has_ip()) {
    GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ip_.UnsafeRawStringPointer())->clear();
  }
  port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.Address)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.Address.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.Address)
  return false;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Address.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.Address)
}

::google::protobuf::uint8* Address::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:p2p.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Address.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.Address)
  return target;
}

size_t Address::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:p2p.Address)
  size_t total_size = 0;

  if (has_ip()) {
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_port()) {
    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.Address)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Address>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.Address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Address::Swap(Address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Address::InternalSwap(Address* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Address

// required string ip = 1;
bool Address::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Address::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void Address::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void Address::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& Address::ip() const {
  // @@protoc_insertion_point(field_get:p2p.Address.ip)
  return ip_.GetNoArena();
}
void Address::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.Address.ip)
}
#if LANG_CXX11
void Address::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.Address.ip)
}
#endif
void Address::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.Address.ip)
}
void Address::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.Address.ip)
}
::std::string* Address::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:p2p.Address.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Address::release_ip() {
  // @@protoc_insertion_point(field_release:p2p.Address.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Address::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:p2p.Address.ip)
}

// required int32 port = 2;
bool Address::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Address::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void Address::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void Address::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 Address::port() const {
  // @@protoc_insertion_point(field_get:p2p.Address.port)
  return port_;
}
void Address::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:p2p.Address.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kActionFieldNumber;
const int Request::kAdrFieldNumber;
const int Request::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_peer_2dto_2dpeer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_adr()) {
    adr_ = new ::p2p::Address(*from.adr_);
  } else {
    adr_ = NULL;
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:p2p.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adr_ = NULL;
  action_ = 1;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:p2p.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete adr_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  protobuf_peer_2dto_2dpeer_2eproto::InitDefaults();
  return *internal_default_instance();
}

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.Request)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_adr()) {
      GOOGLE_DCHECK(adr_ != NULL);
      adr_->::p2p::Address::Clear();
    }
    action_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .p2p.ActionType action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::p2p::ActionType_IsValid(value)) {
            set_action(static_cast< ::p2p::ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.Request.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .p2p.Address adr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.ActionType action = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Request.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional .p2p.Address adr = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->adr_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:p2p.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.ActionType action = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Request.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional .p2p.Address adr = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->adr_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .p2p.ActionType action = 1;
  if (has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .p2p.Address adr = 3;
    if (has_adr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adr_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_adr()->::p2p::Address::MergeFrom(from.adr());
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_adr()) {
    if (!this->adr_->IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  id_.Swap(&other->id_);
  std::swap(adr_, other->adr_);
  std::swap(action_, other->action_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// required .p2p.ActionType action = 1;
bool Request::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
void Request::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request::clear_action() {
  action_ = 1;
  clear_has_action();
}
::p2p::ActionType Request::action() const {
  // @@protoc_insertion_point(field_get:p2p.Request.action)
  return static_cast< ::p2p::ActionType >(action_);
}
void Request::set_action(::p2p::ActionType value) {
  assert(::p2p::ActionType_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:p2p.Request.action)
}

// optional .p2p.Address adr = 3;
bool Request::has_adr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request::set_has_adr() {
  _has_bits_[0] |= 0x00000002u;
}
void Request::clear_has_adr() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request::clear_adr() {
  if (adr_ != NULL) adr_->::p2p::Address::Clear();
  clear_has_adr();
}
const ::p2p::Address& Request::adr() const {
  // @@protoc_insertion_point(field_get:p2p.Request.adr)
  return adr_ != NULL ? *adr_
                         : *::p2p::Address::internal_default_instance();
}
::p2p::Address* Request::mutable_adr() {
  set_has_adr();
  if (adr_ == NULL) {
    adr_ = new ::p2p::Address;
  }
  // @@protoc_insertion_point(field_mutable:p2p.Request.adr)
  return adr_;
}
::p2p::Address* Request::release_adr() {
  // @@protoc_insertion_point(field_release:p2p.Request.adr)
  clear_has_adr();
  ::p2p::Address* temp = adr_;
  adr_ = NULL;
  return temp;
}
void Request::set_allocated_adr(::p2p::Address* adr) {
  delete adr_;
  adr_ = adr;
  if (adr) {
    set_has_adr();
  } else {
    clear_has_adr();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.Request.adr)
}

// optional string id = 2;
bool Request::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Request::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& Request::id() const {
  // @@protoc_insertion_point(field_get:p2p.Request.id)
  return id_.GetNoArena();
}
void Request::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.Request.id)
}
#if LANG_CXX11
void Request::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.Request.id)
}
#endif
void Request::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.Request.id)
}
void Request::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.Request.id)
}
::std::string* Request::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:p2p.Request.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request::release_id() {
  // @@protoc_insertion_point(field_release:p2p.Request.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:p2p.Request.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Respond::kActionFieldNumber;
const int Respond::kIdFieldNumber;
const int Respond::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Respond::Respond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_peer_2dto_2dpeer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.Respond)
}
Respond::Respond(const Respond& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      id_(from.id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&action_, &from.action_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&action_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:p2p.Respond)
}

void Respond::SharedCtor() {
  _cached_size_ = 0;
  action_ = 1;
  result_ = 1;
}

Respond::~Respond() {
  // @@protoc_insertion_point(destructor:p2p.Respond)
  SharedDtor();
}

void Respond::SharedDtor() {
}

void Respond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Respond::descriptor() {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Respond& Respond::default_instance() {
  protobuf_peer_2dto_2dpeer_2eproto::InitDefaults();
  return *internal_default_instance();
}

Respond* Respond::New(::google::protobuf::Arena* arena) const {
  Respond* n = new Respond;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Respond::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.Respond)
  id_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    action_ = 1;
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Respond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.Respond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .p2p.ActionType action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::p2p::ActionType_IsValid(value)) {
            set_action(static_cast< ::p2p::ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id(this->id_size() - 1).data(),
            this->id(this->id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.Respond.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .p2p.StatusType result = 4 [default = SUCCESS];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::p2p::StatusType_IsValid(value)) {
            set_result(static_cast< ::p2p::StatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.Respond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.Respond)
  return false;
#undef DO_
}

void Respond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.Respond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.ActionType action = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // repeated string id = 3;
  for (int i = 0, n = this->id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id(i).data(), this->id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Respond.id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(i), output);
  }

  // optional .p2p.StatusType result = 4 [default = SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.Respond)
}

::google::protobuf::uint8* Respond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:p2p.Respond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.ActionType action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // repeated string id = 3;
  for (int i = 0, n = this->id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id(i).data(), this->id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Respond.id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->id(i), target);
  }

  // optional .p2p.StatusType result = 4 [default = SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.Respond)
  return target;
}

size_t Respond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.Respond)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .p2p.ActionType action = 1;
  if (has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }
  // repeated string id = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->id_size());
  for (int i = 0, n = this->id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->id(i));
  }

  // optional .p2p.StatusType result = 4 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Respond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.Respond)
  GOOGLE_DCHECK_NE(&from, this);
  const Respond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Respond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.Respond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.Respond)
    MergeFrom(*source);
  }
}

void Respond::MergeFrom(const Respond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.Respond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Respond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.Respond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Respond::CopyFrom(const Respond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.Respond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Respond::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Respond::Swap(Respond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Respond::InternalSwap(Respond* other) {
  id_.InternalSwap(&other->id_);
  std::swap(action_, other->action_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Respond::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Respond

// required .p2p.ActionType action = 1;
bool Respond::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Respond::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
void Respond::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void Respond::clear_action() {
  action_ = 1;
  clear_has_action();
}
::p2p::ActionType Respond::action() const {
  // @@protoc_insertion_point(field_get:p2p.Respond.action)
  return static_cast< ::p2p::ActionType >(action_);
}
void Respond::set_action(::p2p::ActionType value) {
  assert(::p2p::ActionType_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:p2p.Respond.action)
}

// repeated string id = 3;
int Respond::id_size() const {
  return id_.size();
}
void Respond::clear_id() {
  id_.Clear();
}
const ::std::string& Respond::id(int index) const {
  // @@protoc_insertion_point(field_get:p2p.Respond.id)
  return id_.Get(index);
}
::std::string* Respond::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:p2p.Respond.id)
  return id_.Mutable(index);
}
void Respond::set_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:p2p.Respond.id)
  id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Respond::set_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:p2p.Respond.id)
  id_.Mutable(index)->assign(std::move(value));
}
#endif
void Respond::set_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p2p.Respond.id)
}
void Respond::set_id(int index, const char* value, size_t size) {
  id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p2p.Respond.id)
}
::std::string* Respond::add_id() {
  // @@protoc_insertion_point(field_add_mutable:p2p.Respond.id)
  return id_.Add();
}
void Respond::add_id(const ::std::string& value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p2p.Respond.id)
}
#if LANG_CXX11
void Respond::add_id(::std::string&& value) {
  id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p2p.Respond.id)
}
#endif
void Respond::add_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p2p.Respond.id)
}
void Respond::add_id(const char* value, size_t size) {
  id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p2p.Respond.id)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Respond::id() const {
  // @@protoc_insertion_point(field_list:p2p.Respond.id)
  return id_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Respond::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:p2p.Respond.id)
  return &id_;
}

// optional .p2p.StatusType result = 4 [default = SUCCESS];
bool Respond::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Respond::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void Respond::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void Respond::clear_result() {
  result_ = 1;
  clear_has_result();
}
::p2p::StatusType Respond::result() const {
  // @@protoc_insertion_point(field_get:p2p.Respond.result)
  return static_cast< ::p2p::StatusType >(result_);
}
void Respond::set_result(::p2p::StatusType value) {
  assert(::p2p::StatusType_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:p2p.Respond.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kActionFieldNumber;
const int Command::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_peer_2dto_2dpeer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:p2p.Command)
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_ = 1;
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:p2p.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Command& Command::default_instance() {
  protobuf_peer_2dto_2dpeer_2eproto::InitDefaults();
  return *internal_default_instance();
}

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.Command)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    action_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .p2p.ActionType action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::p2p::ActionType_IsValid(value)) {
            set_action(static_cast< ::p2p::ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.Command.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.ActionType action = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // required string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Command.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:p2p.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.ActionType action = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // required string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Command.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.Command)
  return target;
}

size_t Command::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:p2p.Command)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_action()) {
    // required .p2p.ActionType action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  return total_size;
}
size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required .p2p.ActionType action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  id_.Swap(&other->id_);
  std::swap(action_, other->action_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// required .p2p.ActionType action = 1;
bool Command::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Command::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
void Command::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
void Command::clear_action() {
  action_ = 1;
  clear_has_action();
}
::p2p::ActionType Command::action() const {
  // @@protoc_insertion_point(field_get:p2p.Command.action)
  return static_cast< ::p2p::ActionType >(action_);
}
void Command::set_action(::p2p::ActionType value) {
  assert(::p2p::ActionType_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:p2p.Command.action)
}

// required string id = 2;
bool Command::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Command::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Command::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Command::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& Command::id() const {
  // @@protoc_insertion_point(field_get:p2p.Command.id)
  return id_.GetNoArena();
}
void Command::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.Command.id)
}
#if LANG_CXX11
void Command::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.Command.id)
}
#endif
void Command::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.Command.id)
}
void Command::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.Command.id)
}
::std::string* Command::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:p2p.Command.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Command::release_id() {
  // @@protoc_insertion_point(field_release:p2p.Command.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Command::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:p2p.Command.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Indication::kActionFieldNumber;
const int Indication::kResultFieldNumber;
const int Indication::kIdFieldNumber;
const int Indication::kAdrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Indication::Indication()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_peer_2dto_2dpeer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.Indication)
}
Indication::Indication(const Indication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_adr()) {
    adr_ = new ::p2p::Address(*from.adr_);
  } else {
    adr_ = NULL;
  }
  ::memcpy(&action_, &from.action_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&action_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:p2p.Indication)
}

void Indication::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adr_ = NULL;
  action_ = 1;
  result_ = 1;
}

Indication::~Indication() {
  // @@protoc_insertion_point(destructor:p2p.Indication)
  SharedDtor();
}

void Indication::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete adr_;
  }
}

void Indication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Indication::descriptor() {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Indication& Indication::default_instance() {
  protobuf_peer_2dto_2dpeer_2eproto::InitDefaults();
  return *internal_default_instance();
}

Indication* Indication::New(::google::protobuf::Arena* arena) const {
  Indication* n = new Indication;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Indication::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.Indication)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_adr()) {
      GOOGLE_DCHECK(adr_ != NULL);
      adr_->::p2p::Address::Clear();
    }
    action_ = 1;
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Indication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.Indication)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .p2p.ActionType action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::p2p::ActionType_IsValid(value)) {
            set_action(static_cast< ::p2p::ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .p2p.StatusType result = 2 [default = SUCCESS];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::p2p::StatusType_IsValid(value)) {
            set_result(static_cast< ::p2p::StatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.Indication.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .p2p.Address adr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.Indication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.Indication)
  return false;
#undef DO_
}

void Indication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.Indication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.ActionType action = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // required .p2p.StatusType result = 2 [default = SUCCESS];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Indication.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  // optional .p2p.Address adr = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->adr_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.Indication)
}

::google::protobuf::uint8* Indication::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:p2p.Indication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .p2p.ActionType action = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // required .p2p.StatusType result = 2 [default = SUCCESS];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Indication.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // optional .p2p.Address adr = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->adr_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.Indication)
  return target;
}

size_t Indication::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:p2p.Indication)
  size_t total_size = 0;

  if (has_action()) {
    // required .p2p.ActionType action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  if (has_result()) {
    // required .p2p.StatusType result = 2 [default = SUCCESS];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t Indication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.Indication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required .p2p.ActionType action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());

    // required .p2p.StatusType result = 2 [default = SUCCESS];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .p2p.Address adr = 4;
    if (has_adr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adr_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Indication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.Indication)
  GOOGLE_DCHECK_NE(&from, this);
  const Indication* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Indication>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.Indication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.Indication)
    MergeFrom(*source);
  }
}

void Indication::MergeFrom(const Indication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.Indication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_adr()->::p2p::Address::MergeFrom(from.adr());
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Indication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.Indication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Indication::CopyFrom(const Indication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.Indication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Indication::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_adr()) {
    if (!this->adr_->IsInitialized()) return false;
  }
  return true;
}

void Indication::Swap(Indication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Indication::InternalSwap(Indication* other) {
  id_.Swap(&other->id_);
  std::swap(adr_, other->adr_);
  std::swap(action_, other->action_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Indication::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Indication

// required .p2p.ActionType action = 1;
bool Indication::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Indication::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
void Indication::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
void Indication::clear_action() {
  action_ = 1;
  clear_has_action();
}
::p2p::ActionType Indication::action() const {
  // @@protoc_insertion_point(field_get:p2p.Indication.action)
  return static_cast< ::p2p::ActionType >(action_);
}
void Indication::set_action(::p2p::ActionType value) {
  assert(::p2p::ActionType_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:p2p.Indication.action)
}

// required .p2p.StatusType result = 2 [default = SUCCESS];
bool Indication::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Indication::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
void Indication::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
void Indication::clear_result() {
  result_ = 1;
  clear_has_result();
}
::p2p::StatusType Indication::result() const {
  // @@protoc_insertion_point(field_get:p2p.Indication.result)
  return static_cast< ::p2p::StatusType >(result_);
}
void Indication::set_result(::p2p::StatusType value) {
  assert(::p2p::StatusType_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:p2p.Indication.result)
}

// optional string id = 3;
bool Indication::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Indication::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Indication::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Indication::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& Indication::id() const {
  // @@protoc_insertion_point(field_get:p2p.Indication.id)
  return id_.GetNoArena();
}
void Indication::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.Indication.id)
}
#if LANG_CXX11
void Indication::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.Indication.id)
}
#endif
void Indication::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.Indication.id)
}
void Indication::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.Indication.id)
}
::std::string* Indication::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:p2p.Indication.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Indication::release_id() {
  // @@protoc_insertion_point(field_release:p2p.Indication.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Indication::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:p2p.Indication.id)
}

// optional .p2p.Address adr = 4;
bool Indication::has_adr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Indication::set_has_adr() {
  _has_bits_[0] |= 0x00000002u;
}
void Indication::clear_has_adr() {
  _has_bits_[0] &= ~0x00000002u;
}
void Indication::clear_adr() {
  if (adr_ != NULL) adr_->::p2p::Address::Clear();
  clear_has_adr();
}
const ::p2p::Address& Indication::adr() const {
  // @@protoc_insertion_point(field_get:p2p.Indication.adr)
  return adr_ != NULL ? *adr_
                         : *::p2p::Address::internal_default_instance();
}
::p2p::Address* Indication::mutable_adr() {
  set_has_adr();
  if (adr_ == NULL) {
    adr_ = new ::p2p::Address;
  }
  // @@protoc_insertion_point(field_mutable:p2p.Indication.adr)
  return adr_;
}
::p2p::Address* Indication::release_adr() {
  // @@protoc_insertion_point(field_release:p2p.Indication.adr)
  clear_has_adr();
  ::p2p::Address* temp = adr_;
  adr_ = NULL;
  return temp;
}
void Indication::set_allocated_adr(::p2p::Address* adr) {
  delete adr_;
  adr_ = adr;
  if (adr) {
    set_has_adr();
  } else {
    clear_has_adr();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.Indication.adr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transcation::kLenFieldNumber;
const int Transcation::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transcation::Transcation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_peer_2dto_2dpeer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.Transcation)
}
Transcation::Transcation(const Transcation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:p2p.Transcation)
}

void Transcation::SharedCtor() {
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0;
}

Transcation::~Transcation() {
  // @@protoc_insertion_point(destructor:p2p.Transcation)
  SharedDtor();
}

void Transcation::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transcation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transcation::descriptor() {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transcation& Transcation::default_instance() {
  protobuf_peer_2dto_2dpeer_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transcation* Transcation::New(::google::protobuf::Arena* arena) const {
  Transcation* n = new Transcation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transcation::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.Transcation)
  if (has_msg()) {
    GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*msg_.UnsafeRawStringPointer())->clear();
  }
  len_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transcation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.Transcation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 len = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.Transcation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.Transcation)
  return false;
#undef DO_
}

void Transcation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.Transcation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->len(), output);
  }

  // required bytes msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.Transcation)
}

::google::protobuf::uint8* Transcation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:p2p.Transcation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->len(), target);
  }

  // required bytes msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.Transcation)
  return target;
}

size_t Transcation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:p2p.Transcation)
  size_t total_size = 0;

  if (has_msg()) {
    // required bytes msg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  if (has_len()) {
    // required int32 len = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }

  return total_size;
}
size_t Transcation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.Transcation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes msg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());

    // required int32 len = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transcation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.Transcation)
  GOOGLE_DCHECK_NE(&from, this);
  const Transcation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transcation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.Transcation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.Transcation)
    MergeFrom(*source);
  }
}

void Transcation::MergeFrom(const Transcation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.Transcation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      len_ = from.len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transcation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.Transcation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transcation::CopyFrom(const Transcation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.Transcation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transcation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Transcation::Swap(Transcation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transcation::InternalSwap(Transcation* other) {
  msg_.Swap(&other->msg_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transcation::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transcation

// required int32 len = 1;
bool Transcation::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transcation::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
void Transcation::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transcation::clear_len() {
  len_ = 0;
  clear_has_len();
}
::google::protobuf::int32 Transcation::len() const {
  // @@protoc_insertion_point(field_get:p2p.Transcation.len)
  return len_;
}
void Transcation::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:p2p.Transcation.len)
}

// required bytes msg = 2;
bool Transcation::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transcation::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void Transcation::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transcation::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& Transcation::msg() const {
  // @@protoc_insertion_point(field_get:p2p.Transcation.msg)
  return msg_.GetNoArena();
}
void Transcation::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p2p.Transcation.msg)
}
#if LANG_CXX11
void Transcation::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.Transcation.msg)
}
#endif
void Transcation::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.Transcation.msg)
}
void Transcation::set_msg(const void* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.Transcation.msg)
}
::std::string* Transcation::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:p2p.Transcation.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transcation::release_msg() {
  // @@protoc_insertion_point(field_release:p2p.Transcation.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transcation::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:p2p.Transcation.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> Msg::_default_version_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg::kVersionFieldNumber;
const int Msg::kTypeFieldNumber;
const int Msg::kRqsFieldNumber;
const int Msg::kRspFieldNumber;
const int Msg::kCmdFieldNumber;
const int Msg::kIdtFieldNumber;
const int Msg::kTrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg::Msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_peer_2dto_2dpeer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p2p.Msg)
}
Msg::Msg(const Msg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&Msg::_default_version_.get());
  if (from.has_version()) {
    version_.AssignWithDefault(&Msg::_default_version_.get(), from.version_);
  }
  if (from.has_rqs()) {
    rqs_ = new ::p2p::Request(*from.rqs_);
  } else {
    rqs_ = NULL;
  }
  if (from.has_rsp()) {
    rsp_ = new ::p2p::Respond(*from.rsp_);
  } else {
    rsp_ = NULL;
  }
  if (from.has_cmd()) {
    cmd_ = new ::p2p::Command(*from.cmd_);
  } else {
    cmd_ = NULL;
  }
  if (from.has_idt()) {
    idt_ = new ::p2p::Indication(*from.idt_);
  } else {
    idt_ = NULL;
  }
  if (from.has_trs()) {
    trs_ = new ::p2p::Transcation(*from.trs_);
  } else {
    trs_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:p2p.Msg)
}

void Msg::SharedCtor() {
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&Msg::_default_version_.get());
  ::memset(&rqs_, 0, reinterpret_cast<char*>(&trs_) -
    reinterpret_cast<char*>(&rqs_) + sizeof(trs_));
  type_ = 1;
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:p2p.Msg)
  SharedDtor();
}

void Msg::SharedDtor() {
  version_.DestroyNoArena(&Msg::_default_version_.get());
  if (this != internal_default_instance()) {
    delete rqs_;
  }
  if (this != internal_default_instance()) {
    delete rsp_;
  }
  if (this != internal_default_instance()) {
    delete cmd_;
  }
  if (this != internal_default_instance()) {
    delete idt_;
  }
  if (this != internal_default_instance()) {
    delete trs_;
  }
}

void Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg::descriptor() {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Msg& Msg::default_instance() {
  protobuf_peer_2dto_2dpeer_2eproto::InitDefaults();
  return *internal_default_instance();
}

Msg* Msg::New(::google::protobuf::Arena* arena) const {
  Msg* n = new Msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:p2p.Msg)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&Msg::_default_version_.get()));
      (*version_.UnsafeRawStringPointer())->assign(*&Msg::_default_version_.get());
    }
    if (has_rqs()) {
      GOOGLE_DCHECK(rqs_ != NULL);
      rqs_->::p2p::Request::Clear();
    }
    if (has_rsp()) {
      GOOGLE_DCHECK(rsp_ != NULL);
      rsp_->::p2p::Respond::Clear();
    }
    if (has_cmd()) {
      GOOGLE_DCHECK(cmd_ != NULL);
      cmd_->::p2p::Command::Clear();
    }
    if (has_idt()) {
      GOOGLE_DCHECK(idt_ != NULL);
      idt_->::p2p::Indication::Clear();
    }
    if (has_trs()) {
      GOOGLE_DCHECK(trs_ != NULL);
      trs_->::p2p::Transcation::Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p2p.Msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1 [default = "0.1.0"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "p2p.Msg.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .p2p.Msg.MsgType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::p2p::Msg_MsgType_IsValid(value)) {
            set_type(static_cast< ::p2p::Msg_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .p2p.Request rqs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rqs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .p2p.Respond rsp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .p2p.Command cmd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .p2p.Indication idt = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_idt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .p2p.Transcation trs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p2p.Msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p2p.Msg)
  return false;
#undef DO_
}

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p2p.Msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string version = 1 [default = "0.1.0"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Msg.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // required .p2p.Msg.MsgType type = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .p2p.Request rqs = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rqs_, output);
  }

  // optional .p2p.Respond rsp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->rsp_, output);
  }

  // optional .p2p.Command cmd = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cmd_, output);
  }

  // optional .p2p.Indication idt = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->idt_, output);
  }

  // optional .p2p.Transcation trs = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->trs_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:p2p.Msg)
}

::google::protobuf::uint8* Msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:p2p.Msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string version = 1 [default = "0.1.0"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "p2p.Msg.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // required .p2p.Msg.MsgType type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .p2p.Request rqs = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->rqs_, deterministic, target);
  }

  // optional .p2p.Respond rsp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->rsp_, deterministic, target);
  }

  // optional .p2p.Command cmd = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->cmd_, deterministic, target);
  }

  // optional .p2p.Indication idt = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->idt_, deterministic, target);
  }

  // optional .p2p.Transcation trs = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->trs_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2p.Msg)
  return target;
}

size_t Msg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:p2p.Msg)
  size_t total_size = 0;

  if (has_version()) {
    // required string version = 1 [default = "0.1.0"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  if (has_type()) {
    // required .p2p.Msg.MsgType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2p.Msg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000041) ^ 0x00000041) == 0) {  // All required fields are present.
    // required string version = 1 [default = "0.1.0"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());

    // required .p2p.Msg.MsgType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 62u) {
    // optional .p2p.Request rqs = 3;
    if (has_rqs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rqs_);
    }

    // optional .p2p.Respond rsp = 4;
    if (has_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rsp_);
    }

    // optional .p2p.Command cmd = 5;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_);
    }

    // optional .p2p.Indication idt = 6;
    if (has_idt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->idt_);
    }

    // optional .p2p.Transcation trs = 7;
    if (has_trs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trs_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p2p.Msg)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p2p.Msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p2p.Msg)
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p2p.Msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_version();
      version_.AssignWithDefault(&Msg::_default_version_.get(), from.version_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rqs()->::p2p::Request::MergeFrom(from.rqs());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_rsp()->::p2p::Respond::MergeFrom(from.rsp());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_cmd()->::p2p::Command::MergeFrom(from.cmd());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_idt()->::p2p::Indication::MergeFrom(from.idt());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_trs()->::p2p::Transcation::MergeFrom(from.trs());
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p2p.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2p.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;
  if (has_rqs()) {
    if (!this->rqs_->IsInitialized()) return false;
  }
  if (has_rsp()) {
    if (!this->rsp_->IsInitialized()) return false;
  }
  if (has_cmd()) {
    if (!this->cmd_->IsInitialized()) return false;
  }
  if (has_idt()) {
    if (!this->idt_->IsInitialized()) return false;
  }
  if (has_trs()) {
    if (!this->trs_->IsInitialized()) return false;
  }
  return true;
}

void Msg::Swap(Msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg::InternalSwap(Msg* other) {
  version_.Swap(&other->version_);
  std::swap(rqs_, other->rqs_);
  std::swap(rsp_, other->rsp_);
  std::swap(cmd_, other->cmd_);
  std::swap(idt_, other->idt_);
  std::swap(trs_, other->trs_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  protobuf_peer_2dto_2dpeer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dto_2dpeer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Msg

// required string version = 1 [default = "0.1.0"];
bool Msg::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Msg::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void Msg::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void Msg::clear_version() {
  version_.ClearToDefaultNoArena(&Msg::_default_version_.get());
  clear_has_version();
}
const ::std::string& Msg::version() const {
  // @@protoc_insertion_point(field_get:p2p.Msg.version)
  return version_.GetNoArena();
}
void Msg::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&Msg::_default_version_.get(), value);
  // @@protoc_insertion_point(field_set:p2p.Msg.version)
}
#if LANG_CXX11
void Msg::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &Msg::_default_version_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p2p.Msg.version)
}
#endif
void Msg::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&Msg::_default_version_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p2p.Msg.version)
}
void Msg::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&Msg::_default_version_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p2p.Msg.version)
}
::std::string* Msg::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:p2p.Msg.version)
  return version_.MutableNoArena(&Msg::_default_version_.get());
}
::std::string* Msg::release_version() {
  // @@protoc_insertion_point(field_release:p2p.Msg.version)
  clear_has_version();
  return version_.ReleaseNoArena(&Msg::_default_version_.get());
}
void Msg::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&Msg::_default_version_.get(), version);
  // @@protoc_insertion_point(field_set_allocated:p2p.Msg.version)
}

// required .p2p.Msg.MsgType type = 2;
bool Msg::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Msg::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
void Msg::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void Msg::clear_type() {
  type_ = 1;
  clear_has_type();
}
::p2p::Msg_MsgType Msg::type() const {
  // @@protoc_insertion_point(field_get:p2p.Msg.type)
  return static_cast< ::p2p::Msg_MsgType >(type_);
}
void Msg::set_type(::p2p::Msg_MsgType value) {
  assert(::p2p::Msg_MsgType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:p2p.Msg.type)
}

// optional .p2p.Request rqs = 3;
bool Msg::has_rqs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Msg::set_has_rqs() {
  _has_bits_[0] |= 0x00000002u;
}
void Msg::clear_has_rqs() {
  _has_bits_[0] &= ~0x00000002u;
}
void Msg::clear_rqs() {
  if (rqs_ != NULL) rqs_->::p2p::Request::Clear();
  clear_has_rqs();
}
const ::p2p::Request& Msg::rqs() const {
  // @@protoc_insertion_point(field_get:p2p.Msg.rqs)
  return rqs_ != NULL ? *rqs_
                         : *::p2p::Request::internal_default_instance();
}
::p2p::Request* Msg::mutable_rqs() {
  set_has_rqs();
  if (rqs_ == NULL) {
    rqs_ = new ::p2p::Request;
  }
  // @@protoc_insertion_point(field_mutable:p2p.Msg.rqs)
  return rqs_;
}
::p2p::Request* Msg::release_rqs() {
  // @@protoc_insertion_point(field_release:p2p.Msg.rqs)
  clear_has_rqs();
  ::p2p::Request* temp = rqs_;
  rqs_ = NULL;
  return temp;
}
void Msg::set_allocated_rqs(::p2p::Request* rqs) {
  delete rqs_;
  rqs_ = rqs;
  if (rqs) {
    set_has_rqs();
  } else {
    clear_has_rqs();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.Msg.rqs)
}

// optional .p2p.Respond rsp = 4;
bool Msg::has_rsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Msg::set_has_rsp() {
  _has_bits_[0] |= 0x00000004u;
}
void Msg::clear_has_rsp() {
  _has_bits_[0] &= ~0x00000004u;
}
void Msg::clear_rsp() {
  if (rsp_ != NULL) rsp_->::p2p::Respond::Clear();
  clear_has_rsp();
}
const ::p2p::Respond& Msg::rsp() const {
  // @@protoc_insertion_point(field_get:p2p.Msg.rsp)
  return rsp_ != NULL ? *rsp_
                         : *::p2p::Respond::internal_default_instance();
}
::p2p::Respond* Msg::mutable_rsp() {
  set_has_rsp();
  if (rsp_ == NULL) {
    rsp_ = new ::p2p::Respond;
  }
  // @@protoc_insertion_point(field_mutable:p2p.Msg.rsp)
  return rsp_;
}
::p2p::Respond* Msg::release_rsp() {
  // @@protoc_insertion_point(field_release:p2p.Msg.rsp)
  clear_has_rsp();
  ::p2p::Respond* temp = rsp_;
  rsp_ = NULL;
  return temp;
}
void Msg::set_allocated_rsp(::p2p::Respond* rsp) {
  delete rsp_;
  rsp_ = rsp;
  if (rsp) {
    set_has_rsp();
  } else {
    clear_has_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.Msg.rsp)
}

// optional .p2p.Command cmd = 5;
bool Msg::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Msg::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
void Msg::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
void Msg::clear_cmd() {
  if (cmd_ != NULL) cmd_->::p2p::Command::Clear();
  clear_has_cmd();
}
const ::p2p::Command& Msg::cmd() const {
  // @@protoc_insertion_point(field_get:p2p.Msg.cmd)
  return cmd_ != NULL ? *cmd_
                         : *::p2p::Command::internal_default_instance();
}
::p2p::Command* Msg::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == NULL) {
    cmd_ = new ::p2p::Command;
  }
  // @@protoc_insertion_point(field_mutable:p2p.Msg.cmd)
  return cmd_;
}
::p2p::Command* Msg::release_cmd() {
  // @@protoc_insertion_point(field_release:p2p.Msg.cmd)
  clear_has_cmd();
  ::p2p::Command* temp = cmd_;
  cmd_ = NULL;
  return temp;
}
void Msg::set_allocated_cmd(::p2p::Command* cmd) {
  delete cmd_;
  cmd_ = cmd;
  if (cmd) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.Msg.cmd)
}

// optional .p2p.Indication idt = 6;
bool Msg::has_idt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Msg::set_has_idt() {
  _has_bits_[0] |= 0x00000010u;
}
void Msg::clear_has_idt() {
  _has_bits_[0] &= ~0x00000010u;
}
void Msg::clear_idt() {
  if (idt_ != NULL) idt_->::p2p::Indication::Clear();
  clear_has_idt();
}
const ::p2p::Indication& Msg::idt() const {
  // @@protoc_insertion_point(field_get:p2p.Msg.idt)
  return idt_ != NULL ? *idt_
                         : *::p2p::Indication::internal_default_instance();
}
::p2p::Indication* Msg::mutable_idt() {
  set_has_idt();
  if (idt_ == NULL) {
    idt_ = new ::p2p::Indication;
  }
  // @@protoc_insertion_point(field_mutable:p2p.Msg.idt)
  return idt_;
}
::p2p::Indication* Msg::release_idt() {
  // @@protoc_insertion_point(field_release:p2p.Msg.idt)
  clear_has_idt();
  ::p2p::Indication* temp = idt_;
  idt_ = NULL;
  return temp;
}
void Msg::set_allocated_idt(::p2p::Indication* idt) {
  delete idt_;
  idt_ = idt;
  if (idt) {
    set_has_idt();
  } else {
    clear_has_idt();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.Msg.idt)
}

// optional .p2p.Transcation trs = 7;
bool Msg::has_trs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Msg::set_has_trs() {
  _has_bits_[0] |= 0x00000020u;
}
void Msg::clear_has_trs() {
  _has_bits_[0] &= ~0x00000020u;
}
void Msg::clear_trs() {
  if (trs_ != NULL) trs_->::p2p::Transcation::Clear();
  clear_has_trs();
}
const ::p2p::Transcation& Msg::trs() const {
  // @@protoc_insertion_point(field_get:p2p.Msg.trs)
  return trs_ != NULL ? *trs_
                         : *::p2p::Transcation::internal_default_instance();
}
::p2p::Transcation* Msg::mutable_trs() {
  set_has_trs();
  if (trs_ == NULL) {
    trs_ = new ::p2p::Transcation;
  }
  // @@protoc_insertion_point(field_mutable:p2p.Msg.trs)
  return trs_;
}
::p2p::Transcation* Msg::release_trs() {
  // @@protoc_insertion_point(field_release:p2p.Msg.trs)
  clear_has_trs();
  ::p2p::Transcation* temp = trs_;
  trs_ = NULL;
  return temp;
}
void Msg::set_allocated_trs(::p2p::Transcation* trs) {
  delete trs_;
  trs_ = trs;
  if (trs) {
    set_has_trs();
  } else {
    clear_has_trs();
  }
  // @@protoc_insertion_point(field_set_allocated:p2p.Msg.trs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace p2p

// @@protoc_insertion_point(global_scope)
